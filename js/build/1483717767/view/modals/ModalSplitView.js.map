{"version":3,"sources":["view/modals/ModalSplitView.js"],"names":["define","app","ModalView","UserCardView","TenantModel","ModalSplitTemplate","extend","className","events","change .amount","title","this","action","template","_","initialize","_options","model","context","user","session","toJSON","renderModalView","render","rent","get","user_id","id","autopay","ready","total","utils","prettyMoney","renderChart","getSplitData","splitInput","lease","clone","my_id","_id","split","tenants","map","tenant","suggested_split","existing_splits","filter","name","missing_splits","length","calculated_suggestion","rent_covered","parseFloat","is_user_set","hasOwnProperty","push","reduce","a","b","missing_rent","new_total","remaining","$el","find","val","updateChart","split_data","keys","forEach","e","my_split","parseMoney","data","self","$","cards","sort","each","tenantModel","amount","append","html","updatedSplit","updatedRemaining","validateSplit","currentTarget","invalid","validateMoney","stopPropagation","controls","fieldError","element","type","error","constructData","formData","is","schema","process"],"mappings":"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","file":"ModalSplitView.js","sourcesContent":["/**\n * ModalSplitView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'view/cards/user_payments',\n  'model/users/TenantModel',\n  'text!templates/modals/modal-split.html'\n],\nfunction(\n  app, \n  ModalView, \n  UserCardView, \n  TenantModel, \n  ModalSplitTemplate\n) {\n\n  return ModalView.extend({\n\n    className: 'split',\n\n    events: {\n      'change .amount': 'validateSplit'\n    },\n\n    title: function() {\n      return this.action + ' Rent Split';\n    },\n\n    template: _.template(ModalSplitTemplate),\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      this.model = this.context.model;\n      this.user = app.session.user.toJSON();\n\n      this.renderModalView();\n    },\n\n    render: function() {\n      var rent = this.model.get('rent');\n      var user_id = app.session.user.id;\n\n      var autopay = this.model.get('autopay')[user_id] === true;\n\n      this.ready({\n        total: app.utils.prettyMoney(rent),\n        autopay: autopay\n      });\n\n      this.renderChart();\n\n      return this;\n    },\n\n    getSplitData: function(splitInput) {\n      var lease = this.model.clone().toJSON();\n      // var my_id = this.user.first_name + ' ' + this.user.last_name[0];\n      var my_id = this.user._id;\n      var split = lease.split;\n\n      // this endpoint doesn't include split on tenant...\n      lease.tenants = lease.tenants.map(function(tenant) {\n        if (split[tenant._id]) tenant.split = split[tenant._id];\n        return tenant;\n      });\n\n      // get tenants who have split set up\n      var existing_splits = lease.tenants.filter(function(tenant) {\n        return typeof tenant.split !== 'undefined';\n      }).map(function(tenant) {\n        return {\n          // name: tenant.first_name + ' ' + tenant.last_name[0],\n          name: tenant._id,\n          split: tenant.split\n        };\n      });\n\n      // get number of tenants without split\n      var missing_splits = lease.tenants.length - existing_splits.length;\n      // console.log('missing: ' + missing_splits)\n      \n      var suggested_split;\n      var calculated_suggestion = missing_splits ? ((lease.rent - rent_covered) / missing_splits) : 0;\n      // if argument for split was passed, include that for current user \n      if (splitInput) {\n        suggested_split = parseFloat(splitInput);\n      } else {\n        suggested_split = calculated_suggestion;\n      }\n\n      // not sure if i really need to check for this\n      var is_user_set = lease.split && lease.split.hasOwnProperty(this.user._id);\n\n      if (!is_user_set) {\n        existing_splits.push({\n          name: my_id,\n          split: suggested_split\n        });\n      } else if (splitInput) {\n        existing_splits = existing_splits.map(function(split) {\n          if (split.name == my_id) split.split = suggested_split;\n          return split;\n        });\n      }\n\n      // tally up how much rent is account for\n      var rent_covered = existing_splits.map(function(tenant) {\n        return tenant.split;\n      }).reduce(function(a, b) {\n        return a + b;\n      }, 0);\n\n      // how much rent is unaccounted for\n      var missing_rent = lease.rent - rent_covered;\n\n      // console.log('already covered: ' + rent_covered, 'rent missing: ' + missing_rent)\n\n      // tally splits up with new user suggested split\n      var new_total = existing_splits.map(function(tenant) {\n        return tenant.split;\n      }).reduce(function(a, b) {\n        return a + b;\n      }, 0);\n\n      // using the new suggested split, what is left?\n      var remaining = lease.rent - new_total;\n\n      // console.log(remaining)\n\n      // check if this exceeds rent\n      if (remaining < 0) {\n        this.$el.find('.amount').val(missing_rent);\n        this.updateChart(missing_rent);\n        return false;\n      }\n\n      // console.log('new total: ' + new_total);\n      // console.log('suggested: ' + suggested_split + ' each')\n\n      // should i be checking for this?\n      if (missing_rent) {\n        existing_splits.push({\n          name: 'Remaining',\n          split: remaining\n        });\n      }\n\n      // console.log(existing_splits)\n\n      // format data for C3\n      var split_data = {};\n      var keys = [];\n\n      existing_splits.forEach(function(e) {\n        keys.push(e.name);\n        split_data[e.name] = e.split;\n      });\n\n      var my_split = split_data[my_id];\n\n      this.$el.find('.amount').val(app.utils.parseMoney(my_split));\n\n      return {\n        data: split_data,\n        keys: keys\n      };\n    },\n\n    renderChart: function(splitInput) {\n      var self = this;\n      var tenants = $.extend(true, [], this.model.get('tenants'));\n      var my_id = this.user._id;\n\n      this.cards = {};\n\n      var split_data = this.getSplitData(splitInput);\n\n      // put self first in array\n      tenants = tenants.sort(function(a, b) {\n        if (a.split) {\n          return -1;\n        } else {\n          return 1;\n        }\n      }).sort(function(a, b) {\n        if (a._id === my_id) {\n          return -1;\n        } else if (b._id === my_id) {\n          return 1;\n        }\n      });\n\n      // add new split data to array\n      tenants = tenants.map(function(tenant) {\n        tenant.split = split_data.data[tenant._id];\n        return tenant;\n      });\n\n      // var split = this.model.get('split');\n\n      _.each(tenants, function(tenant) {\n        var tenantModel = new TenantModel(tenant);\n        self.cards[tenantModel.id] = new UserCardView({ \n          data: tenantModel.toJSON(),\n          amount: tenantModel.toJSON().split\n        });\n\n        self.$el.find('.chart').append(self.cards[tenantModel.id].$el);\n      });\n\n      var remaining = split_data.data['Remaining'] ? app.utils.prettyMoney(split_data.data['Remaining']) : 0;\n      this.$el.find('.remaining').html(remaining);\n    },\n\n    updateChart: function(splitInput) {\n      var split_data = this.getSplitData(splitInput);\n\n      var id = this.user._id;\n\n      if (!split_data) return;\n\n      var updatedSplit = app.utils.prettyMoney(split_data.data[id]);\n      var updatedRemaining = app.utils.prettyMoney(split_data.data['Remaining'] || 0);\n\n      this.$el.find('.remaining').html(updatedRemaining);\n      this.cards[id].$el.find('.transfer-data li').html(updatedSplit);\n    },\n\n    validateSplit: function(e) {\n      var amount = $(e.currentTarget).val();\n      var invalid = app.utils.validateMoney(amount);\n      \n      if (invalid) {\n        e.stopPropagation();\n        app.controls.fieldError({\n          element: $(e.currentTarget),\n          type: 'error',\n          error: invalid\n        });\n      } else {\n        this.updateChart(amount);\n      }\n    },\n\n    constructData: function() {\n      \n      var formData = {\n        split: this.$el.find('.amount').val(),\n        autopay: this.$el.find('#autopay').is(':checked')\n      };\n\n      return app.schema.process(formData, this.model);\n    }\n\n  });\n});"]}