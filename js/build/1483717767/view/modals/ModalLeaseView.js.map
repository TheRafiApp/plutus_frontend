{"version":3,"sources":["view/modals/ModalLeaseView.js"],"names":["define","app","kalendae","ModalView","LeaseModel","ChargeRepeater","TenantsCollection","ModalLeaseTemplate","extend","events","click .action-add-recurring","click .action-add-scheduled","click .overlay","change select.type","keyup .bill_due_day","change #first","change #last","keyup input.rent","title","this","action","template","_","recurring_charges","scheduled_charges","start_moment","end_moment","tenants","hasTouch","utils","initialize","_options","self","unit","context","model","parentModelId","leases","property","collections","currentCollection","get","_id","on","calendarOpen","fetch","then","renderModalView","$calendar","$el","find","$input","siblings","$container","scroll","scrollTop","offset","closest","position","container_height","outerHeight","parent_height","parent","calendar_height","group_height","container_bottom","calendar_bottom","top","controls","wait","focus","render","toJSON","session","isSuperAdmin","company_id","JSON","parse","stringify","where","company","start_date","end_date","selected_tenants","last_month_passed","first_month","last_month","moment","utc","add","startOf","subtract","pluck","last_month_date","date","today","ready","capitalize","$start_field","$end_field","fixed_term","month_to_month","each","lease","type","push","attr","val","format","$","proxy","typeChange","endChange","Kalendae","Input","months","selected","blackout","rangeClass","mode","rangeLock","direction","subscribe","trigger","change","formChanged","charges","recurring","forEach","charge","addRecurring","amount","scheduled","contains","addScheduled","mask","translation","z","pattern","check","every","start","end","conflict","rentChanged","rent","toggleFees","updateDueDay","day","getSelectedRaw","due_date","updateOrdinal","$day","fieldError","element","message","ordinal","getOrdinal","html","toggleFee","$checkbox","boolean","$fee_input","children","prop","selector","$fees","$fee","toggleFirst","toggleLast","length","duration","diff","asMonths","Math","abs","round","selection","$select","lease_type","endNeeded","end_moments","removeClass","text","incremented","setSelected","validateSpan","error","constructData","$form","formData","serializeObject","id","$first","$last","parseMoney","renewed_lease_id","autopay","toFixed","schema","process","original_charges","indexOf","console","log","confirm","validate","isNew","tenants_array","map","tenant","set","loadLock","save","always","eventName","closeModal","alerts","success","messages","fail","handleError","e","responseJSON","existing_lease","data","recurringCounter","event","recurring_charge","options","description","name","indexKey","min","append","scheduledCounter","scheduled_charge","easyClose","changed","modalShake"],"mappings":"AAIAA,QACE,MACA,WACA,wBACA,0BACA,wBACA,qCACA,0CAEF,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAOJ,GAAUK,QAEfC,QAIEC,8BAA+B,eAC/BC,8BAA+B,eAC/BC,iBAAkB,YAClBC,qBAAsB,aACtBC,sBAAuB,gBACvBC,gBAAiB,cACjBC,eAAgB,aAChBC,mBAAoB,eAGtBC,MAAO,WACL,MAAOC,MAAKC,OAAS,UAGvBC,SAAUC,EAAED,SAASd,GAErBgB,qBACAC,qBAEAC,cAAc,EACdC,YAAY,EAEZC,QAAS,GAAIrB,GAEbsB,SAAU3B,EAAI4B,MAAMD,WAapBE,WAAY,SAASC,GACfA,GAAUT,EAAEd,OAAOW,KAAMY,GACxBZ,KAAKC,SAAQD,KAAKC,OAAS,MAEhC,IAAIY,GAAOb,IAGXA,MAAKc,KAAOd,KAAKe,QAAQC,MACzBhB,KAAKiB,cAAgBjB,KAAKe,QAAQE,cAGlCjB,KAAKkB,OAASlB,KAAKe,QAAQG,OAGvBlB,KAAKiB,gBACPjB,KAAKmB,SAAWrC,EAAIsC,YAAYC,kBAAkBC,KAAMC,IAAKvB,KAAKiB,iBAI/DjB,KAAKgB,QAAOhB,KAAKgB,MAAQ,GAAI/B,IAUlCe,KAAKwB,GAAG,gBAAiBxB,KAAKyB,aAAczB,MAG5CA,KAAKQ,QAAQkB,QAAQC,KAAK,WACxBd,EAAKe,qBAKTH,aAAc,WACZ,GAAII,GAAY7B,KAAK8B,IAAIC,KAAK,wBAC1BC,EAASH,EAAUI,SAAS,SAC5BC,EAAalC,KAAK8B,IAAIC,KAAK,YAC3BI,EAASD,EAAWE,YAGpBC,EAASR,EAAUS,QAAQ,6BAA6BC,WAExDC,EAAmBN,EAAWO,cAC9BC,EAAgBb,EAAUc,SAASF,cACnCG,EAAkBf,EAAUY,cAC5BI,EAAeH,EAAgBE,EAG/BE,EAAmBX,EAASK,EAC5BO,EAAkBF,EAAeR,EAAOW,GAGxCD,GAAkBD,IACpBZ,EAAWE,UAAUC,EAAOW,KAE5BlE,EAAImE,SAASC,KAAK,IAAIvB,KAAK,WACzBK,EAAOmB,YAKbC,OAAQ,WACN,GAAIvC,GAAOb,KAEPQ,EAAUR,KAAKQ,QAAQ6C,QAE3B,IAAIvE,EAAIwE,QAAQC,eAAgB,CAC9B,GAAIC,GAAaxD,KAAKmB,SAASG,IAAI,UACnCd,GAAUiD,KAAKC,MAAMD,KAAKE,UAAU3D,KAAKQ,QAAQoD,OAAQC,QAASL,MAKpE,GAAIM,GACAC,EACAC,GAAmB,EACnBC,GAAoB,EAEpBC,EAAclE,KAAKgB,MAAMM,IAAI,eAC7B6C,EAAanE,KAAKgB,MAAMM,IAAI,aAEhC,QAAOtB,KAAKC,QACV,IAAK,MACH6D,EAAaM,OAAOC,MAAMC,IAAI,SAAU,GAAGC,QAAQ,SAASA,QAAQ,OACpER,EAAWK,OAAOC,MAAMC,IAAI,SAAU,GACtC,MACF,KAAK,OACHR,EAAa9D,KAAKgB,MAAMM,IAAI,gBAG5ByC,EAAW/D,KAAKgB,MAAMM,IAAI,cAGrByC,IAEDA,EADE/D,KAAKgB,MAAMM,IAAI,YACN8C,OAAOC,MAEPD,OAAOC,IAAIP,GAAYQ,IAAI,SAAU,IAAIE,SAAS,OAAQ,IAIzER,EAAmB,GAAI7E,GAAkBa,KAAKgB,MAAMM,IAAI,YAAYmD,MAAM,MAC1E,MACF,KAAK,QAQH,GAPAX,EAAa9D,KAAKgB,MAAMM,IAAI,cAAcgD,IAAI,OAAQ,GACtDP,EAAWK,OAAOC,IAAIP,GAAYQ,IAAI,SAAU,IAAIE,SAAS,OAAQ,GACrER,EAAmB,GAAI7E,GAAkBa,KAAKgB,MAAMM,IAAI,YAAYmD,MAAM,OAKtEN,EAAY,CACd,GAAIO,GAAkBN,OAAOC,IAAIF,EAAWQ,MACxCC,EAAQR,OAAOC,KAGfO,GAAQF,IACVT,GAAoB,IAK5BjE,KAAK6E,OACH5E,OAAQnB,EAAI4B,MAAMoE,WAAW9E,KAAKC,QAClCa,KAAMd,KAAKc,KAAKuC,SAChBlC,SAAUnB,KAAKmB,SAASkC,SACxB7C,QAASA,EACTwD,iBAAkBA,EAClBC,kBAAmBA,EACnBC,YAAaA,EACbC,WAAYA,GAKd,IAAIY,GAAe/E,KAAK8B,IAAIC,KAAK,eAC7BiD,EAAahF,KAAK8B,IAAIC,KAAK,aAI3BkD,KACAC,IAuFJ,IAnFA/E,EAAEgF,KAAKnF,KAAKkB,OAAQ,SAASkE,GAC3BA,EAAMtB,WAAaM,OAAOC,IAAIe,EAAMtB,YAClB,cAAdsB,EAAMC,MACRD,EAAMrB,SAAWK,OAAOC,IAAIe,EAAMrB,UAClCkB,EAAWK,KAAKF,IAEhBF,EAAeI,KAAKF,KAMnBpF,KAAKS,UAgDRT,KAAK8D,WAAaiB,EAClB/E,KAAK+D,SAAWiB,EAEhBhF,KAAK8D,WAAWyB,KAAK,OAAQ,QAAQC,IAAI1B,EAAW2B,OAAO,eAC3DzF,KAAK+D,SAASwB,KAAK,OAAQ,QAAQC,IAAIzB,EAAS0B,OAAO,eAEvDzF,KAAK8D,WAAWtC,GAAG,SAAUkE,EAAEC,MAAM3F,KAAK4F,WAAY5F,OAEtDA,KAAK+D,SAASvC,GAAG,SAAU,WAEzBkE,EAAEC,MAAM9E,EAAKgF,YAAahF,OAzD5Bb,KAAK8D,WAAa,GAAIgC,UAASC,MAAMhB,EAAa,IAChDiB,OAAQ,EACRC,SAAUnC,EAEVoC,SAAU,SAASvB,GACjB,MAAO9D,GAAKqF,SAASvB,EAAMM,IAG7BkB,WAAY,SAASxB,GACnB,MAAO9D,GAAKsF,WAAWxB,EAAMO,MAIjClF,KAAK+D,SAAW,GAAI+B,UAASC,MAAMf,EAAW,IAC5CgB,OAAQ,EACRI,KAAM,QACNC,WAAW,EACXC,UAAW,gBACXL,UAAWnC,EAAYC,GAEvBmC,SAAU,SAASvB,GACjB,MAAO9D,GAAKqF,SAASvB,EAAMM,IAE7BkB,WAAY,SAASxB,GACnB,MAAO9D,GAAKsF,WAAWxB,EAAMO,MAMjClF,KAAK8D,WAAWyC,UAAU,SAAU,WAClC1F,EAAK+E,eAEP5F,KAAK8D,WAAWyC,UAAU,OAAQ,WAChC1F,EAAK2F,QAAQ,mBAKfxG,KAAK+D,SAASwC,UAAU,SAAU,SAAS5B,GACzC9D,EAAKgF,cAEP7F,KAAK+D,SAASwC,UAAU,OAAQ,WAC9B1F,EAAK2F,QAAQ,oBAkBjBxG,KAAK4F,aAIL5F,KAAK8B,IAAIC,KAAK,SAAS0E,OAAOf,EAAEC,MAAM3F,KAAK0G,YAAa1G,OACxDA,KAAK8B,IAAIC,KAAK,UAAU0E,OAAOf,EAAEC,MAAM3F,KAAK0G,YAAa1G,OAItC,OAAfA,KAAKC,OAAiB,CACxB,GAAI0G,GAAU3G,KAAKgB,MAAMM,IAAI,WACzBsF,EAAYD,EAAQC,SAKxB,IAJAA,EAAUC,QAAQ,SAASC,GACN,QAAfA,EAAOzB,MAAgBxE,EAAKkG,aAAa,KAAMD,EAAOE,UAGzC,SAAfhH,KAAKC,OAAmB,CAC1B,GAAII,GAAoBsG,EAAQM,SAChC5G,GAAkBwG,QAAQ,SAASC,IAC5B,MAAO,UAAUI,SAASJ,EAAOzB,OAAOxE,EAAKsG,aAAa,KAAML,EAAOE,OAAQF,EAAOnC,SA2BjG,MApBA3E,MAAK8B,IAAIC,KAAK,iBAAiBqF,KAAK,MACpCpH,KAAK8B,IAAIC,KAAK,oCAAoCqF,KAAK,WACrDC,aACEC,GACEC,QAAS,cAgBRvH,MAGTkG,SAAU,SAASvB,EAAMzD,GACvByD,EAAOP,OAAOC,IAAIM,EAClB,IAAI6C,IAAQ,CAYZ,OAXAtG,GAAOuG,MAAM,SAASrC,GACpB,GAAIsC,GAAQtC,EAAMtB,WACd6D,EAAMvC,EAAMrB,SACZ6D,EAAWF,GAAS/C,GAAQA,GAAQgD,CACxC,QAAIC,IACFJ,GAAQ,GACD,OAKJA,GAGTrB,WAAY,SAASxB,EAAMzD,GACzB,GAAIsG,IAAQ,CAqBZ,OApBAtG,GAAOuG,MAAM,SAASrC,GACpB,GAEIwC,GAFAF,EAAQtC,EAAMtB,WACdmC,EAAWpF,KAAKP,YAWpB,OAPIsH,GAFA3B,GACEA,EAAWyB,EACFA,GAAS/C,GAAQA,EAAOsB,EAK1BtB,GAAQ+C,GAEjBE,IACFJ,GAAQ,GACD,MAKJA,GAAgB,oBAIzBK,YAAa,WACX,GAAIC,GAAO9H,KAAK8B,IAAIC,KAAK,SAASyD,KAC9BsC,GACF9H,KAAK+H,YAAW,GAEhB/H,KAAK+H,YAAW,IAIpBC,aAAc,WACZ,GACIN,GADAO,EAAMjI,KAAK8B,IAAIC,KAAK,gBASxB,IAHE2F,EAHG5I,EAAI4B,MAAMD,WAGL2D,OAAOC,IAAIrE,KAAK8D,WAAW0B,OAF3BxF,KAAK8D,WAAWoE,iBAAiB,GAK3C,CAEAR,EAAQA,EAAMjC,OAAO,IAErB,IAAI0C,GAAWT,EAAQ,GAAK,GAAKA,CACjCO,GAAIzC,IAAI2C,GACRnI,KAAKoI,kBAGPA,cAAe,WACb,GAEID,GAFAE,EAAOrI,KAAK8B,IAAIC,KAAK,iBACrBkG,EAAMI,EAAK7C,KAEXyC,GAAM,IACRE,EAAW,GAEXrJ,EAAImE,SAASqF,YACXC,QAASF,EACTG,QAAS,yEAIXL,EAAWF,EAEbI,EAAK7C,IAAI2C,EACT,IAAIM,GAAU3J,EAAI4B,MAAMgI,WAAWP,EACnCnI,MAAK8B,IAAIC,KAAK,YAAY4G,KAAKF,IAIjCG,UAAW,SAASC,EAAWC,GAC7B,GAAIC,GAAaF,EAAU5G,SAAS,UAAU+G,SAAS,QACvD,IAAIF,GAEF,GAAID,EAAUI,KAAK,WAAY,CAC7B,GAAInB,GAAO9H,KAAK8B,IAAIC,KAAK,SAASyD,KAClCuD,GAAWvD,IAAIsC,GACfiB,EAAWE,KAAK,YAAY,QAI9BF,GAAWE,KAAK,YAAY,GAC5BF,EAAWvD,IAAI,SAKnBuC,WAAY,SAASe,EAASI,GAC5B,GAAIrI,GAAOb,IAGY,oBAAZkJ,KAAyBA,EAAW,GAC/C,IAAIC,GAAQnJ,KAAK8B,IAAIC,KAAK,OAASmH,EAEnC,IAAIJ,EAAS,CACXK,EAAMpH,KAAK,WAAWkH,KAAK,YAAY,EACvC,IAAInB,GAAO9H,KAAK8B,IAAIC,KAAK,SAASyD,KAElCrF,GAAEgF,KAAKgE,EAAO,SAASC,GACrBvI,EAAK+H,UAAUlD,EAAE0D,GAAMJ,SAAS,YAAY,GAExCtD,EAAE0D,GAAMJ,SAAS,WAAWC,KAAK,cAAe,GAClDvD,EAAE0D,GAAMJ,SAAS,gBAAgBxD,IAAIsC,SAKzC9H,MAAK4I,UAAUO,EAAMH,SAAS,YAAY,GAC1CG,EAAMpH,KAAK,WAAWkH,KAAK,YAAY,GACvCE,EAAMpH,KAAK,WAAWkH,KAAK,WAAW,IAK1CI,YAAa,WACX,GAAIR,GAAY7I,KAAK8B,IAAIC,KAAK,UAC1B+G,IAAUD,EAAUI,KAAK,UAE7BjJ,MAAK4I,UAAUC,EAAWC,IAG5BQ,WAAY,WACV,GAAIT,GAAY7I,KAAK8B,IAAIC,KAAK,SAC1B+G,IAAUD,EAAUI,KAAK,UAE7BjJ,MAAK4I,UAAUC,EAAWC,IAG5BjD,UAAW,WACT,GAAI6B,GACAC,CAQJ,IAPK3H,KAAKS,UAIRiH,EAAQtD,OAAOC,IAAIrE,KAAK8D,WAAW0B,OACnCmC,EAAMvD,OAAOC,IAAIrE,KAAK+D,SAASyB,SAJ/BkC,EAAQ1H,KAAK8D,WAAWoE,iBAAiB,GACzCP,EAAM3H,KAAK+D,SAASmE,iBAAiB,IAKlCP,EAAL,CAGAA,EAAMvD,OAAOuD,GAAKrD,IAAI,OAAQ,EAG9B,IAAIiF,GAASnF,OAAOoF,SAAS9B,EAAM+B,KAAK9B,IAAM+B,UAE9CH,GAASI,KAAKC,IAAID,KAAKE,MAAMN,GAE7B,IAAIO,EAIFA,IADG,GAAI,GAAG5C,SAASqC,GACPA,EAEA,QAId,IAAIQ,GAAU/J,KAAK8B,IAAIC,KAAK,cAC5BgI,GAAQvE,IAAIsE,GAAWtD,QAAQ,oBAIjCZ,WAAY,WACV,GAAIoE,GAAahK,KAAK8B,IAAIC,KAAK,eAAeyD,MAC1CyE,GAAY,CAUhB,IARKjK,KAAKS,UAIRT,KAAKM,aAAe8D,OAAOC,IAAIrE,KAAK8D,WAAW0B,OAC/CxF,KAAKkK,YAAc9F,OAAOC,IAAIrE,KAAK+D,SAASyB,SAJ5CxF,KAAKM,aAAeN,KAAK8D,WAAWoE,iBAAiB,GACrDlI,KAAKkK,YAAclK,KAAK+D,SAASmE,kBAMhB,QAAflI,KAAKC,OAAT,CAEA,GAAI8E,GAAe/E,KAAK8B,IAAIC,KAAK,eAC7BiD,EAAahF,KAAK8B,IAAIC,KAAK,YAE/BgD,GAAapC,SAASwH,YAAY,aAAanB,SAAS,cAAcoB,KAAK,IAC3EpF,EAAWrC,SAASwH,YAAY,aAAanB,SAAS,cAAcoB,KAAK,GAGzE,IAAIC,EAEc,KAAdL,GAEFK,EAAcjG,OAAOC,IAAIrE,KAAKM,cAAcgE,IAAI,SAAU0F,GAAYxF,SAAS,OAAQ,GACvFQ,EAAWiE,KAAK,YAAY,GAE5BjJ,KAAK6H,eAGkB,GAAdmC,GAETK,EAAcjG,OAAOC,IAAIrE,KAAKM,cAAcgE,IAAI,SAAU0F,GAAYxF,SAAS,OAAQ,GACvFQ,EAAWiE,KAAK,YAAY,IAGL,kBAAde,GAEThF,EAAWO,KAAK,OAAQ,QACxBP,EAAWQ,IAAI,OACfR,EAAWiE,KAAK,YAAY,GAE5BgB,GAAY,EAEZjK,KAAK+H,YAAW,EAAO,gBAGA,UAAdiC,IAEJhK,KAAKS,SAKR4J,EAAcjG,OAAOC,IAAIrE,KAAK+D,SAASyB,OAJnCxF,KAAK+D,SAASmE,iBAAiBqB,OAAS,IAC1Cc,EAAcrK,KAAK+D,SAASmE,iBAAiB,IAKjDlD,EAAWiE,KAAK,YAAY,IAG1BgB,IACGjK,KAAKS,UAGRuE,EAAWO,KAAK,OAAQ,QACxBvF,KAAK+D,SAASyB,IAAI6E,EAAY5E,OAAO,gBAHrCzF,KAAK+D,SAASuG,aAAatK,KAAKM,aAAc+J,KAOlDrK,KAAKgI,eACLhI,KAAKuK,iBAGPA,aAAc,WACZ,GACIzG,GACAC,CAEJ,IAAK/D,KAAKS,SAMRqD,EAAaM,OAAOC,IAAIrE,KAAK8D,WAAW0B,OACxCzB,EAAWK,OAAOC,IAAIrE,KAAK+D,SAASyB,WAPlB,CAClB,GAAIxF,KAAK+D,SAASmE,iBAAiBqB,OAAS,EAAG,OAAO,CAEtDzF,GAAa9D,KAAK8D,WAAWoE,iBAAiB,GAC9CnE,EAAW/D,KAAK+D,SAASmE,iBAAiB,GAMvClI,KAAKkB,QAEVlB,KAAKkB,OAAO2F,QAAQ,SAASzB,GACvBA,EAAMtB,YAAcA,GAAcA,GAAcsB,EAAMrB,UACxDjF,EAAImE,SAASqF,YACXC,QAAS,cACTiC,MAAO,+BAGPpF,EAAMtB,YAAcC,GAAYA,GAAYqB,EAAMrB,UACpDjF,EAAImE,SAASqF,YACXC,QAAS,YACTiC,MAAO,kCAMfC,cAAe,WACb,GAAIC,GAAQ1K,KAAK8B,IAAIC,KAAK,QAGtB4E,GACFC,aACAK,cAGE0D,EAAWD,EAAME,iBAGrBjE,GAAUxG,EAAEd,OAAOsH,EAASgE,EAAShE,SACrCgE,EAAShE,QAAUA,EAGnBgE,EAAS7J,KAAOd,KAAKc,KAAK+J,EAG1B,IAEI7D,GAFA8D,EAAS9K,KAAK8B,IAAIC,KAAK,UACvBgJ,EAAQ/K,KAAK8B,IAAIC,KAAK,QA+B1B,IA5BI+I,EAAO7B,KAAK,aACdjC,EAAS8D,EAAO7I,SAAS,UAAU+G,SAAS,SAASxD,MACrDmF,EAAShE,QAAQM,UAAU3B,MACzBD,KAAM,cACN2B,OAAQ,IAAMlI,EAAI4B,MAAMsK,WAAWhE,MAInC+D,EAAM9B,KAAK,aACbjC,EAAS+D,EAAM9I,SAAS,UAAU+G,SAAS,SAASxD,MACpDmF,EAAShE,QAAQM,UAAU3B,MACzBD,KAAM,aACN2B,OAAQ,IAAMlI,EAAI4B,MAAMsK,WAAWhE,MAKpB,SAAfhH,KAAKC,SACP0K,EAASM,iBAAmBjL,KAAKgB,MAAMM,IAAI,OACvCtB,KAAKgB,MAAMM,IAAI,aACjBqJ,EAASO,QAAUlL,KAAKgB,MAAMM,IAAI,WAAW6J,QAAQ,KAIzDR,EAAW7L,EAAIsM,OAAOC,QAAQV,EAAU3K,KAAKgB,OAI1B,QAAfhB,KAAKC,OAAkB,OAClB0K,GAAS7C,WACT6C,GAAS7G,iBACT6G,GAAS7J,WACT6J,GAASvF,KAGhB,IAAIkG,GAAmBtL,KAAKgB,MAAMM,IAAI,oBAEtCgK,GAAiBzE,QAAQ,SAASC,IAC3B,cAAe,cAAcyE,QAAQzE,EAAOzB,OAAQ,GACvDsF,EAAShE,QAAQM,UAAU3B,KAAKwB,KAOtC,MAFA0E,SAAQC,IAAId,GAELA,GAITe,QAAS,WACP,GAAI7K,GAAOb,KAEP2K,EAAW3K,KAAKyK,gBAEhBkB,EAAW7M,EAAI4B,MAAMiL,SAAS3L,KAAM2K,EAExC,KAAKgB,EAAU,OAAO,CAGtB,KAAK3L,KAAKgB,MAAM4K,QAAS,CAGvB,GAAIpL,GAAUR,KAAKgB,MAAMM,IAAI,WACzBuK,IAEJrL,GAAQsL,IAAI,SAASC,GACnBF,EAAcvG,KAAKyG,EAAOxK,OAG5BvB,KAAKgB,MAAMgL,IAAI,UAAWH,GAG5B/M,EAAImE,SAASgJ,UAAS,GAEtBjM,KAAKgB,MAAMkL,KAAKvB,GAAUwB,OAAO,WAC/BrN,EAAImE,SAASgJ,UAAS,KACrBtK,KAAK,WACNd,EAAKE,QAAQyF,QAAQ3F,EAAKuL,WAC1BvL,EAAKwL,aACLvN,EAAIwN,OAAOC,QAAQ1L,EAAK2L,SAASD,WAChCE,KAAK,SAASjC,GACf3J,EAAK6L,YAAYlC,MAIrBkC,YAAa,SAASC,GACpB,GAAInC,GACAhC,CAEJ,IAAImE,EAAEC,cAAwC,oBAAxBD,EAAEC,aAAapC,MAA6B,CAChEA,EAAQmC,EAAEC,aACVpE,EAAUgC,EAAMhC,OAChB,IAAIqE,GAAiBrC,EAAMsC,KAAKD,eAC5B/I,EAAa+I,EAAe/I,WAC5BC,EAAW8I,EAAe9I,QAE9BjF,GAAIwN,OAAO9B,MAAMhC,EAAU,KAAO1E,EAAa,MAAQC,KAK3DgJ,iBAAkB,EAElBhG,aAAc,SAASiG,EAAOhG,GACvBA,IAAQA,GAAS,EACtB,IAAIiG,GAAmB,GAAI/N,IACzBgO,SACE7H,MAAM,EACN8H,aAAa,GAEf9H,KAAM,YACN+H,KAAM,oBACNpG,OAAQA,EACR6D,GAAI7K,KAAK+M,mBACTM,SAAU,mBACVtM,QAASf,KACTsN,IAAK,GAGPtN,MAAKI,kBAAkBkF,KAAK2H,GAC5BjN,KAAK8B,IAAIC,KAAK,cAAcwL,OAAON,EAAiBnL,MAGtD0L,iBAAkB,EAElBrG,aAAc,SAAS6F,EAAOhG,EAAQrC,GAC/BqC,IAAQA,GAAS,GACjBrC,IAAMA,GAAO,EAClB,IAAI8I,GAAmB,GAAIvO,IACzBgO,SACE7H,MAAM,EACN8H,aAAa,GAEf9H,KAAM,YACN+H,KAAM,oBACNpG,OAAQA,EACRrC,KAAMA,EACN5D,QAASf,KACT6K,GAAI7K,KAAKwN,mBACTH,SAAU,mBACVC,IAAK,GAGPtN,MAAKK,kBAAkBiF,KAAKmI,GAC5BzN,KAAK8B,IAAIC,KAAK,cAAcwL,OAAOE,EAAiB3L,MAGtD4L,UAAW,WACJ1N,KAAK2N,QAGR7O,EAAImE,SAAS2K,WAAW5N,MAFxBA,KAAKqM,cAMT3F,YAAa,WACX1G,KAAK2N,SAAU","file":"ModalLeaseView.js","sourcesContent":["/**\n * ModalLeaseView.js\n */\n\ndefine([\n  'app',\n  'kalendae',\n  'view/modals/ModalView',\n  'model/leases/LeaseModel',\n  'view/repeaters/charge',\n  'collection/users/TenantsCollection',\n  'text!templates/modals/modal-lease.html'\n],\nfunction(\n  app, \n  kalendae, \n  ModalView,\n  LeaseModel, \n  ChargeRepeater, \n  TenantsCollection, \n  ModalLeaseTemplate\n) {\n\n  return ModalView.extend({\n\n    'events': {\n      // 'keyup': 'keyControl',\n      // 'click .action-confirm': 'saveModel',\n      // 'click .action-cancel': 'closeModal',\n      'click .action-add-recurring': 'addRecurring',\n      'click .action-add-scheduled': 'addScheduled',\n      'click .overlay': 'easyClose',\n      'change select.type': 'typeChange',\n      'keyup .bill_due_day': 'updateOrdinal',\n      'change #first': 'toggleFirst',\n      'change #last': 'toggleLast',\n      'keyup input.rent': 'rentChanged',\n    },\n\n    title: function() {\n      return this.action + ' Lease';\n    },\n\n    template: _.template(ModalLeaseTemplate),\n\n    recurring_charges: [],\n    scheduled_charges: [],\n\n    start_moment: false,\n    end_moment: false,\n\n    tenants: new TenantsCollection(),\n\n    hasTouch: app.utils.hasTouch(),\n\n    // keyControl: function(e) {\n    //   if (app.utils.getFocused().parentNode.className.contains('actions')) return;\n    //   // esc\n    //   if (e.which === 27) {\n    //     this.easyClose();\n    //   // enter\n    //   } else if (e.which === 13) {\n    //     this.saveModel();\n    //   }\n    // },\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n      if (!this.action) this.action = 'add';\n\n      var self = this;\n\n      // Unit & property\n      this.unit = this.context.model;\n      this.parentModelId = this.context.parentModelId;\n\n      // Leases on the unit\n      this.leases = this.context.leases;\n\n      // TODO: this is to allow for lease creation via /leases, without a unit picked\n      if (this.parentModelId) {\n        this.property = app.collections.currentCollection.get({ _id: this.parentModelId });\n      }\n\n      // If it's a new lease\n      if (!this.model) this.model = new LeaseModel();\n\n      // Bind validation\n      // Backbone.Validation.bind(this);\n      \n      // Set as active modal\n      // app.views.modalView = this;\n      // app.views.appView.trigger('modalOpened');\n\n      // Event listener for opening calendars\n      this.on('calendar-open', this.calendarOpen, this);\n\n      // Get tenants collection\n      this.tenants.fetch().then(function() {\n        self.renderModalView();\n      });\n\n    },\n\n    calendarOpen: function() {\n      var $calendar = this.$el.find('.kalendae-input-open');\n      var $input = $calendar.siblings('input');\n      var $container = this.$el.find('.content');\n      var scroll = $container.scrollTop();\n\n      // bypass repeater field groups\n      var offset = $calendar.closest('.field-group:not(.bypass)').position();\n\n      var container_height = $container.outerHeight();\n      var parent_height = $calendar.parent().outerHeight();\n      var calendar_height = $calendar.outerHeight();\n      var group_height = parent_height + calendar_height;\n\n      // position of bottom of elements relative to scroll container\n      var container_bottom = scroll + container_height;\n      var calendar_bottom = group_height + offset.top;\n\n      // calendar is offscreen\n      if (calendar_bottom > container_bottom) {\n        $container.scrollTop(offset.top);\n        // timeout because of race condition with kalendae blur event\n        app.controls.wait(20).then(function() {\n          $input.focus();\n        });\n      }\n    },\n\n    render: function() {\n      var self = this;\n\n      var tenants = this.tenants.toJSON();\n\n      if (app.session.isSuperAdmin()) {\n        var company_id = this.property.get('company');\n        tenants = JSON.parse(JSON.stringify(this.tenants.where({ company: company_id })));\n      }\n\n      // Action specific data\n\n      var start_date;\n      var end_date;\n      var selected_tenants = false;\n      var last_month_passed = false;\n\n      var first_month = this.model.get('first_month');\n      var last_month = this.model.get('last_month');\n\n      switch(this.action) {\n        case 'add':\n          start_date = moment.utc().add('months', 1).startOf('month').startOf('day'); // next first of the month\n          end_date = moment.utc().add('months', 12);\n          break;\n        case 'edit':\n          start_date = this.model.get('start_moment'); // existing lease\n\n          // if is active, use today, if in the future, do something else\n          end_date = this.model.get('end_moment');\n\n          // if m2m\n          if (!end_date) {\n            if (this.model.get('isActive')) {\n              end_date = moment.utc();\n            } else {\n              end_date = moment.utc(start_date).add('months', 12).subtract('days', 1);\n            }\n          }\n\n          selected_tenants = new TenantsCollection(this.model.get('tenants')).pluck('_id');\n          break;\n        case 'renew':\n          start_date = this.model.get('end_moment').add('days', 1); // existing lease end date +1 day\n          end_date = moment.utc(start_date).add('months', 12).subtract('days', 1);\n          selected_tenants = new TenantsCollection(this.model.get('tenants')).pluck('_id');\n\n          // TODO: This is not the place for this\n          // determine last month's rent situation\n\n          if (last_month) {\n            var last_month_date = moment.utc(last_month.date);\n            var today = moment.utc();\n\n            // if the paid last month is already being used\n            if (today > last_month_date) {\n              last_month_passed = true;\n            }\n          }\n      }\n\n      this.ready({\n        action: app.utils.capitalize(this.action),\n        unit: this.unit.toJSON(),\n        property: this.property.toJSON(),\n        tenants: tenants,\n        selected_tenants: selected_tenants,\n        last_month_passed: last_month_passed,\n        first_month: first_month,\n        last_month: last_month\n      });\n\n      // Date fields\n\n      var $start_field = this.$el.find('#start_date');\n      var $end_field = this.$el.find('#end_date');\n\n      // Format lease data\n\n      var fixed_term = [];\n      var month_to_month = [];\n\n      // Convert datestrings to date objects\n\n      _.each(this.leases, function(lease) {\n        lease.start_date = moment.utc(lease.start_date);\n        if (lease.type == 'fixed_term') {\n          lease.end_date = moment.utc(lease.end_date);\n          fixed_term.push(lease);\n        } else {\n          month_to_month.push(lease);\n        }\n      });\n\n      // Init Kalendae\n\n      if (!this.hasTouch) {\n        this.start_date = new Kalendae.Input($start_field[0], {\n          months: 1,\n          selected: start_date,\n\n          blackout: function(date) {\n            return self.blackout(date, fixed_term);\n          },\n\n          rangeClass: function(date) {\n            return self.rangeClass(date, month_to_month);\n          }\n        });\n\n        this.end_date = new Kalendae.Input($end_field[0], {\n          months: 1,\n          mode: 'range',\n          rangeLock: true,\n          direction: 'select-future',\n          selected: [start_date, end_date], // reverting to the first array element bug\n\n          blackout: function(date) {\n            return self.blackout(date, fixed_term);\n          },\n          rangeClass: function(date) {\n            return self.rangeClass(date, month_to_month);\n          }\n        });\n\n        // Start Date event listeners\n\n        this.start_date.subscribe('change', function() {\n          self.typeChange();\n        });\n        this.start_date.subscribe('show', function() {\n          self.trigger('calendar-open');\n        });\n\n        // End Date event listeners\n\n        this.end_date.subscribe('change', function(date) {\n          self.endChange();\n        });\n        this.end_date.subscribe('show', function() {\n          self.trigger('calendar-open');\n        });\n      } else {\n        // has touchstart\n        this.start_date = $start_field;\n        this.end_date = $end_field;\n\n        this.start_date.attr('type', 'date').val(start_date.format('YYYY-MM-DD'));\n        this.end_date.attr('type', 'date').val(end_date.format('YYYY-MM-DD'));\n\n        this.start_date.on('change', $.proxy(this.typeChange, this));\n\n        this.end_date.on('change', function() {\n          // var date = moment.utc(self.end_date.val());\n          $.proxy(self.endChange(), self);\n        });\n      }\n\n      this.typeChange();\n\n      // Have to set up these listeners after rendering the calendars\n\n      this.$el.find('input').change($.proxy(this.formChanged, this));\n      this.$el.find('select').change($.proxy(this.formChanged, this));\n      \n      // Add charges that exist\n\n      if (this.action != 'add') {\n        var charges = this.model.get('charges');\n        var recurring = charges.recurring;\n        recurring.forEach(function(charge) {\n          if (charge.type != 'rent') self.addRecurring(null, charge.amount);\n        });\n\n        if (this.action != 'renew') {\n          var scheduled_charges = charges.scheduled;\n          scheduled_charges.forEach(function(charge) {\n            if (['fee', 'credit'].contains(charge.type)) self.addScheduled(null, charge.amount, charge.date);\n          });\n        }\n      }\n\n      // Mask money inputs\n\n      this.$el.find('.bill_due_day').mask('00');\n      this.$el.find('.rent, .first_month, .last_month').mask('zzzzzzz', {\n        translation: {\n          'z': {\n            pattern: /[0-9\\.]/\n          }\n        }\n      });\n      \n      // Show modal\n      \n      // $('.modal-container').html(this.$el).addClass('visible');\n\n      // app.utils.prepInputs(this);\n\n      // Init Chosen\n\n      // this.$el.find('.chosen').chosen({ disable_search: true });\n      // this.$el.find('.chosen-multiple').chosen();\n\n      return this;\n    },\n\n    blackout: function(date, leases) {\n      date = moment.utc(date);\n      var check = false;\n      leases.every(function(lease) {\n        var start = lease.start_date;\n        var end = lease.end_date;\n        var conflict = start <= date && date <= end;\n        if (conflict) {\n          check = true;\n          return false;\n        } else {\n          return true;\n        }\n      });\n      return check ? true : false;\n    },\n\n    rangeClass: function(date, leases) {\n      var check = true;\n      leases.every(function(lease) {\n        var start = lease.start_date;\n        var selected = self.start_moment;\n        var conflict;\n        if (selected) {\n          if (selected > start) {\n            conflict = start <= date && date < selected;\n          } else {\n            conflict = date >= start;\n          }\n        } else {\n          conflict = date >= start;\n        }\n        if (conflict) {\n          check = false;\n          return false;\n        } else {\n          return true;\n        }\n      });\n      return check ? false : 'k-month-to-month';\n    },\n\n    // user changed rent value\n    rentChanged: function() {\n      var rent = this.$el.find('.rent').val();\n      if (rent) {\n        this.toggleFees(true);\n      } else {\n        this.toggleFees(false);\n      }\n    },\n\n    updateDueDay: function() {\n      var day = this.$el.find('.bill_due_day');\n      var start;\n\n      if (!app.utils.hasTouch()) {\n        start = this.start_date.getSelectedRaw()[0];\n      } else {\n        start = moment.utc(this.start_date.val());\n      }\n\n      if (!start) return;\n\n      start = start.format('D');\n\n      var due_date = start > 28 ? 28 : start;\n      day.val(due_date);\n      this.updateOrdinal();\n    },\n\n    updateOrdinal: function() {\n      var $day = this.$el.find('.bill_due_day');\n      var day = $day.val();\n      var due_date;\n      if (day > 28) {\n        due_date = 28;\n\n        app.controls.fieldError({\n          element: $day,\n          message: 'Billing date must be a day that is shared by all months in the year'\n        });\n        // $day.closest('.field-group').addClass('has-message').find('.help-text').html('Billing date must be a day that is shared by all months in the year');\n      } else {\n        due_date = day;\n      }\n      $day.val(due_date);\n      var ordinal = app.utils.getOrdinal(due_date);\n      this.$el.find('#ordinal').html(ordinal);\n    },\n\n    // toggle a single fee\n    toggleFee: function($checkbox, boolean) {\n      var $fee_input = $checkbox.siblings('.money').children('input');\n      if (boolean) {\n        \n        if ($checkbox.prop('checked')) {\n          var rent = this.$el.find('.rent').val();\n          $fee_input.val(rent);\n          $fee_input.prop('disabled', false);\n        }\n\n      } else {\n        $fee_input.prop('disabled', true);\n        $fee_input.val('0.00');\n      }\n    },\n\n    // if rent field is empty, disble fee fields\n    toggleFees: function(boolean, selector) {\n      var self = this;\n\n      // may pass a selector to target a single field\n      if (typeof selector == 'undefined') selector = '';\n      var $fees = this.$el.find('.fee' + selector);\n\n      if (boolean) {\n        $fees.find('.toggle').prop('disabled', false);\n        var rent = this.$el.find('.rent').val();\n\n        _.each($fees, function($fee) {\n          self.toggleFee($($fee).children('.toggle'), true);\n\n          if ($($fee).children('.toggle').prop('checked') === true) {\n            $($fee).children('.money input').val(rent);\n          }\n        });\n\n      } else {\n        this.toggleFee($fees.children('.toggle'), false);\n        $fees.find('.toggle').prop('disabled', true);\n        $fees.find('.toggle').prop('checked', false);\n      }\n    },\n\n    // redundant toggle methods since I can't pass an argument with bb events\n    toggleFirst: function() {\n      var $checkbox = this.$el.find('#first');\n      var boolean = $checkbox.prop('checked') ? true : false;\n\n      this.toggleFee($checkbox, boolean);\n    },\n\n    toggleLast: function() {\n      var $checkbox = this.$el.find('#last');\n      var boolean = $checkbox.prop('checked') ? true : false;\n\n      this.toggleFee($checkbox, boolean);\n    },\n\n    endChange: function() {\n      var start;\n      var end;\n      if (!this.hasTouch) {\n        start = this.start_date.getSelectedRaw()[0];\n        end = this.end_date.getSelectedRaw()[1];\n      } else {\n        start = moment.utc(this.start_date.val());\n        end = moment.utc(this.end_date.val());\n      }\n      if (!end) return;\n\n      // add back on that day we subtracted\n      end = moment(end).add('days', 1);\n\n      // get the duration in months\n      var length = moment.duration(start.diff(end)).asMonths();\n      // make sure its positive and round\n      length = Math.abs(Math.round(length));\n\n      var selection;\n\n      // check if the duration is 12 or 6 or custom\n      if ([12, 6].contains(length)) {\n        selection = length;\n      } else {\n        selection = 'custom';\n      }\n\n      // set selection\n      var $select = this.$el.find('select.type');\n      $select.val(selection).trigger('chosen:updated');\n\n    },\n\n    typeChange: function() {\n      var lease_type = this.$el.find('select.type').val();\n      var endNeeded = true;\n\n      if (!this.hasTouch) {\n        this.start_moment = this.start_date.getSelectedRaw()[0];\n        this.end_moments = this.end_date.getSelectedRaw();\n      } else {\n        this.start_moment = moment.utc(this.start_date.val());\n        this.end_moments = moment.utc(this.end_date.val());\n      }\n\n      if (this.action == 'edit') return;\n\n      var $start_field = this.$el.find('#start_date');\n      var $end_field = this.$el.find('#end_date');\n\n      $start_field.parent().removeClass('has-error').children('.help-text').text('');\n      $end_field.parent().removeClass('has-error').children('.help-text').text('');\n\n      // 12 month lease\n      var incremented;\n\n      if (lease_type == 12) {\n        \n        incremented = moment.utc(this.start_moment).add('months', lease_type).subtract('days', 1);\n        $end_field.prop('disabled', false);\n\n        this.rentChanged();\n\n      // 6 month lease\n      } else if (lease_type == 6) {\n\n        incremented = moment.utc(this.start_moment).add('months', lease_type).subtract('days', 1);\n        $end_field.prop('disabled', false);\n\n      // Month to month lease\n      } else if (lease_type == 'month-to-month') {\n\n        $end_field.attr('type', 'text');\n        $end_field.val('N/A');\n        $end_field.prop('disabled', true);\n\n        endNeeded = false;\n\n        this.toggleFees(false, '.last-month');\n\n      // Custom duration\n      } else if (lease_type == 'custom') {\n\n        if (!this.hasTouch) {\n          if (this.end_date.getSelectedRaw().length > 1) {\n            incremented = this.end_date.getSelectedRaw()[1];  \n          }\n        } else {\n          incremented = moment.utc(this.end_date.val());\n        }\n        $end_field.prop('disabled', false);\n      }\n\n      if (endNeeded) {\n        if (!this.hasTouch) {\n          this.end_date.setSelected([this.start_moment, incremented]);\n        } else {\n          $end_field.attr('type', 'date');\n          this.end_date.val(incremented.format('YYYY-MM-DD'));\n        }\n      }\n\n      this.updateDueDay();\n      this.validateSpan();\n    },\n\n    validateSpan: function() {\n      var self = this;\n      var start_date;\n      var end_date;\n\n      if (!this.hasTouch) {\n        if (this.end_date.getSelectedRaw().length < 2) return false;\n\n        start_date = this.start_date.getSelectedRaw()[0];\n        end_date = this.end_date.getSelectedRaw()[1];\n      } else {\n        start_date = moment.utc(this.start_date.val());\n        end_date = moment.utc(this.end_date.val());\n      }\n      \n      if (!this.leases) return;\n\n      this.leases.forEach(function(lease) {\n        if (lease.start_date <= start_date && start_date <= lease.end_date) {\n          app.controls.fieldError({\n            element: '#start_date',\n            error: 'Overlapping lease conflict'\n          });\n        }\n        if (lease.start_date <= end_date && end_date <= lease.end_date) {\n          app.controls.fieldError({\n            element: '#end_date',\n            error: 'Overlapping lease conflict'\n          });\n        }\n      });\n    },\n\n    constructData: function() {\n      var $form = this.$el.find('form');\n\n      // make sure the charges property is always in the data\n      var charges = {\n        recurring: [],\n        scheduled: []\n      };\n\n      var formData = $form.serializeObject();\n\n      // inject default charges\n      charges = _.extend(charges, formData.charges);\n      formData.charges = charges;\n      \n      // Set unit\n      formData.unit = this.unit.id;\n      \n      // Set first, last month's rent\n      var $first = this.$el.find('#first');\n      var $last = this.$el.find('#last');\n      var amount;\n\n      if ($first.prop('checked')) {\n        amount = $first.siblings('.money').children('input').val();\n        formData.charges.scheduled.push({\n          type: 'first_month',\n          amount: '-' + app.utils.parseMoney(amount)\n        });\n      }\n\n      if ($last.prop('checked')) {\n        amount = $last.siblings('.money').children('input').val();\n        formData.charges.scheduled.push({\n          type: 'last_month',\n          amount: '-' + app.utils.parseMoney(amount)\n        });\n      }\n\n      // if existing lease and autopay is active\n      if (this.action == 'renew') {\n        formData.renewed_lease_id = this.model.get('_id');\n        if (this.model.get('autopay')) {\n          formData.autopay = this.model.get('autopay').toFixed(2);\n        }\n      }\n\n      formData = app.schema.process(formData, this.model);\n\n      // if (!app.utils.validate(this, formData)) return false;\n\n      if (this.action == 'edit') {\n        delete formData.rent;\n        delete formData.start_date;\n        delete formData.unit;\n        delete formData.lease;\n\n        // save first and last\n        var original_charges = this.model.get('charges.scheduled');\n\n        original_charges.forEach(function(charge) {\n          if (['first_month', 'last_month'].indexOf(charge.type) > -1) {\n            formData.charges.scheduled.push(charge);\n          }\n        });\n      }\n\n      console.log(formData);\n\n      return formData;\n\n    },\n\n    confirm: function() {\n      var self = this;\n\n      var formData = this.constructData();\n\n      var validate = app.utils.validate(this, formData);\n\n      if (!validate) return false;\n      // HACK: make sure only changed data gets sent\n\n      if (!this.model.isNew()) {\n        // this.model = this.model.clone();\n\n        var tenants = this.model.get('tenants');\n        var tenants_array = [];\n\n        tenants.map(function(tenant) {\n          tenants_array.push(tenant._id);\n        });\n\n        this.model.set('tenants', tenants_array);\n      }\n\n      app.controls.loadLock(true);\n\n      this.model.save(formData).always(function() {\n        app.controls.loadLock(false);\n      }).then(function() {\n        self.context.trigger(self.eventName);\n        self.closeModal();\n        app.alerts.success(self.messages.success);\n      }).fail(function(error) {\n        self.handleError(error);\n      });\n    },\n\n    handleError: function(e) {\n      var error;\n      var message;\n\n      if (e.responseJSON && e.responseJSON.error == 'datespan_overlap') {\n        error = e.responseJSON;\n        message = error.message;\n        var existing_lease = error.data.existing_lease;\n        var start_date = existing_lease.start_date;\n        var end_date = existing_lease.end_date;\n        \n        app.alerts.error(message + ': ' + start_date + ' – ' + end_date);\n      } \n    },\n\n\n    recurringCounter: 0,\n\n    addRecurring: function(event, amount) {\n      if (!amount) amount = false;\n      var recurring_charge = new ChargeRepeater({\n        options: {\n          type: true,\n          description: true\n        },\n        type: 'recurring',\n        name: 'charges.recurring',\n        amount: amount,\n        id: this.recurringCounter++,\n        indexKey: 'recurringCounter',\n        context: this,\n        min: 0\n      });\n\n      this.recurring_charges.push(recurring_charge);\n      this.$el.find('.recurring').append(recurring_charge.$el);\n    },\n\n    scheduledCounter: 0,\n\n    addScheduled: function(event, amount, date) {\n      if (!amount) amount = false;\n      if (!date) date = false;\n      var scheduled_charge = new ChargeRepeater({\n        options: {\n          type: true,\n          description: true\n        },\n        type: 'scheduled',\n        name: 'charges.scheduled',\n        amount: amount,\n        date: date,\n        context: this,\n        id: this.scheduledCounter++,\n        indexKey: 'scheduledCounter',\n        min: 0\n      });\n\n      this.scheduled_charges.push(scheduled_charge);\n      this.$el.find('.scheduled').append(scheduled_charge.$el);\n    },\n\n    easyClose: function() {\n      if (!this.changed) {\n        this.closeModal();\n      } else {\n        app.controls.modalShake(this);\n      }\n    },\n\n    formChanged: function() {\n      this.changed = true;\n    }\n\n  });\n});"]}