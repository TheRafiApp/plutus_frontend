{"version":3,"sources":["view/modals/ModalView.js"],"names":["define","app","ModalTemplate","Backbone","View","extend","modalEvents","keyup","click .action-confirm","click .action-cancel","click .overlay","template_container","_","template","actions","confirm","cancel","messages","success","error","keyControl","e","which","this","closeModal","$focused","utils","getFocused","parentNode","className","contains","attachEvents","events","delegateEvents","listening","renderModalView","_options","views","appView","trigger","modalView","renderContainer","title","$el","html","tabs","renderTabs","render","count","$container","$","each","value","key","array","$li","$a","href","data-tab","addClass","append","find","prepend","ready","data","model","Validation","bind","prepInputs","removeClass","close","context","constructData","$form","formData","serializeObject","schema","process","event","console","trace","currentTarget","hasClass","self","validate","log","controls","loadLock","save","always","then","eventName","alerts","fail","handleError"],"mappings":"AAIAA,QACE,MACA,oCAEF,SAASC,EAAKC,GAEZ,MAAOC,UAASC,KAAKC,QAGnBC,aACEC,MAAS,aACTC,wBAAyB,UACzBC,uBAAwB,aACxBC,iBAAkB,cAIpBC,mBAAoBC,EAAEC,SAASX,GAG/BY,SACEC,SAAS,EACTC,QAAQ,GAIVC,UACEC,QAAS,+BACTC,MAAO,mCAITC,WAAY,SAASC,GAEnB,GAAgB,KAAZA,EAAEC,MACJC,KAAKC,iBAEA,IAAgB,KAAZH,EAAEC,MAAc,CACzB,GAAIG,GAAWxB,EAAIyB,MAAMC,YACzB,IAAIF,EAASG,WAAWC,UAAUC,SAAS,WAAY,MACvD,IAAIL,EAASI,UAAUC,SAAS,aAAc,MAE9CP,MAAKR,QAAQM,KAKjBU,aAAc,WACZ,GAAIC,GAASpB,EAAEP,OAAOkB,KAAKjB,YAAaiB,KAAKS,OAC7CT,MAAKU,eAAeD,GACpBT,KAAKW,WAAY,GAInBC,gBAAiB,SAASC,GACpBA,GAAUxB,EAAEP,OAAOkB,KAAMa,GAEzBnC,EAAIoC,MAAMC,SAASrC,EAAIoC,MAAMC,QAAQC,QAAQ,eACjDtC,EAAIoC,MAAMG,UAAYjB,KAEtBA,KAAKkB,mBAIPA,gBAAiB,WACf,GAEIC,GAA8B,kBAAfnB,MAAKmB,MAAuBnB,KAAKmB,QAAUnB,KAAKmB,KAanE,OAXAnB,MAAKoB,IAAIC,KAAKrB,KAAKZ,oBACjB+B,MAAOA,EACP5B,QAASS,KAAKT,WAGZS,KAAKsB,MAAMtB,KAAKuB,aAEfvB,KAAKW,WAAWX,KAAKQ,eAE1BR,KAAKwB,SAEExB,MAGTuB,WAAY,WACV,GACIE,GAAQ,EACRC,EAAaC,EAAE,oBACnBtC,GAAEuC,KAAK5B,KAAKsB,KAAM,SAASO,EAAOC,EAAKC,GACrC,GAAIC,GAAML,EAAE,QACRM,EAAKN,EAAE,OACTO,KAAQ,IACRC,WAAYL,IACXT,KAAKQ,EAEQ,KAAZJ,KAAeQ,EAAGG,SAAS,UAE/BJ,EAAIK,OAAOJ,GACXP,EAAWW,OAAOL,KAGpBhC,KAAKoB,IAAIkB,KAAK,YAAYC,QAAQb,IAKpCc,MAAO,SAASC,GACVzC,KAAK0C,OAAO9D,SAAS+D,WAAWC,KAAK5C,MAEzCA,KAAKoB,IAAIkB,KAAK,eAAejB,KAAKrB,KAAKV,SAASmD,IAChDd,EAAE,oBAAoBN,KAAKrB,KAAKoB,KAAKgB,SAAS,WAC9C1D,EAAIyB,MAAM0C,WAAW7C,OAIvBC,WAAY,SAASH,GACnB6B,EAAE,oBAAoBmB,YAAY,WAClC9C,KAAK+C,QACL/C,KAAKgD,QAAQhC,QAAQ,eACjBtC,EAAIoC,MAAMC,SAASrC,EAAIoC,MAAMC,QAAQC,QAAQ,gBAInDiC,cAAe,WACb,GAAIC,GAAQlD,KAAKoB,IAAIkB,KAAK,QACtBa,EAAWD,EAAME,iBAErB,OAAO1E,GAAI2E,OAAOC,QAAQH,EAAUnD,KAAK0C,QAI3ClD,QAAS,SAAS+D,GAEhB,GADAC,QAAQC,MAAMF,IACVA,IAAS5B,EAAE4B,EAAMG,eAAeC,SAAS,YAA7C,CAEA,GAAIC,GAAO5D,KAEPmD,EAAWnD,KAAKiD,eAEpB,KAAKvE,EAAIyB,MAAM0D,SAAS7D,KAAMmD,GAAW,OAAO,CAEhDK,SAAQM,IAAIX,GAEZzE,EAAIqF,SAASC,UAAS,GAEtBhE,KAAK0C,MAAMuB,KAAKd,GAAUe,OAAO,WAC/BxF,EAAIqF,SAASC,UAAS,KACrBG,KAAK,WACNP,EAAKZ,QAAQhC,QAAQ4C,EAAKQ,WAC1BR,EAAK3D,aACLvB,EAAI2F,OAAO1E,QAAQiE,EAAKlE,SAASC,WAChC2E,KAAK,SAAS1E,GACfgE,EAAKW,YAAY3E,OAKrB2E,YAAa,SAAS3E,GACpB,MAAOlB,GAAIqF,SAASQ,YAAY3E","file":"ModalView.js","sourcesContent":["/**\n * ModalView.js\n */\n\ndefine([\n  'app',\n  'text!templates/modals/modal.html'\n],\nfunction(app, ModalTemplate) {\n\n  return Backbone.View.extend({\n\n    // default events\n    'modalEvents': {\n      'keyup': 'keyControl',\n      'click .action-confirm': 'confirm',\n      'click .action-cancel': 'closeModal',\n      'click .overlay': 'closeModal'\n    },\n\n    // outer modal template\n    template_container: _.template(ModalTemplate),\n\n    // default actions to allow\n    actions: {\n      confirm: true,\n      cancel: true\n    },\n\n    // default messages\n    messages: {\n      success: 'Your changes have been saved',\n      error: 'Your changes could not be saved'\n    },\n\n    // default keyboard usage\n    keyControl: function(e) {\n      // esc\n      if (e.which === 27) {\n        this.closeModal();\n      // enter\n      } else if (e.which === 13) {\n        var $focused = app.utils.getFocused();\n        if ($focused.parentNode.className.contains('actions')) return;\n        if ($focused.className.contains('no-submit')) return;\n\n        this.confirm(e);\n      }\n    },\n\n    // extend these events with any that were defined in the view\n    attachEvents: function() {\n      var events = _.extend(this.modalEvents, this.events);\n      this.delegateEvents(events);\n      this.listening = true;\n    },\n\n    // this should be fired at the end of initialize\n    renderModalView: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      if (app.views.appView) app.views.appView.trigger('modalOpened');\n      app.views.modalView = this;\n\n      this.renderContainer();\n    },\n\n    // render outer container\n    renderContainer: function() {\n      var self = this;\n\n      var title = typeof this.title === 'function' ? this.title() : this.title;\n\n      this.$el.html(this.template_container({\n        title: title,\n        actions: this.actions, \n      }));\n\n      if (this.tabs) this.renderTabs();\n\n      if (!this.listening) this.attachEvents();\n\n      this.render();\n\n      return this;\n    },\n\n    renderTabs: function() {\n      var self = this;\n      var count = 0;\n      var $container = $('<ul class=\"tabs\">');\n      _.each(this.tabs, function(value, key, array) {\n        var $li = $('<li>');\n        var $a = $('<a>', {\n          'href': '#',\n          'data-tab': key\n        }).html(value);\n\n        if (count++ === 0) $a.addClass('active');\n\n        $li.append($a);\n        $container.append($li);\n      });\n\n      this.$el.find('.content').prepend($container);\n    },\n\n    // add this.$el to DOM and \n    // delegate events\n    ready: function(data) {\n      if (this.model) Backbone.Validation.bind(this);\n\n      this.$el.find('.form-model').html(this.template(data));\n      $('.modal-container').html(this.$el).addClass('visible');\n      app.utils.prepInputs(this);\n    },\n\n    // close the modal\n    closeModal: function(e) {\n      $('.modal-container').removeClass('visible');\n      this.close();\n      this.context.trigger('modalClosed');\n      if (app.views.appView) app.views.appView.trigger('modalClosed');\n    },\n\n    // default method to get form data\n    constructData: function() {\n      var $form = this.$el.find('form');\n      var formData = $form.serializeObject();\n\n      return app.schema.process(formData, this.model);\n    },\n\n    // default confirmation\n    confirm: function(event) {\n      console.trace(event);\n      if (event && $(event.currentTarget).hasClass('disabled')) return;\n\n      var self = this;\n\n      var formData = this.constructData();\n\n      if (!app.utils.validate(this, formData)) return false;\n\n      console.log(formData);\n      \n      app.controls.loadLock(true);\n\n      this.model.save(formData).always(function() {\n        app.controls.loadLock(false);\n      }).then(function() {\n        self.context.trigger(self.eventName);\n        self.closeModal();\n        app.alerts.success(self.messages.success);\n      }).fail(function(error) {\n        self.handleError(error);\n      });\n    },\n\n    // allow for different error handling per modal\n    handleError: function(error) {\n      return app.controls.handleError(error);\n    }\n\n  });\n});"]}