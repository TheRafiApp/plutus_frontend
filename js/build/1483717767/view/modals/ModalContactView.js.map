{"version":3,"sources":["view/modals/ModalContactView.js"],"names":["define","app","ModalView","ModalContactTemplate","extend","className","events","change input.contact","template","_","title","action","utils","capitalize","this","method","initialize","_options","data","context","model","toJSON","AccountModel","models","renderModalView","render","contact","notify","get","ready","$el","find","mask","translation","Z","pattern","addClass","removeClass","prop","confirm","hasClass","submitContact","verifyContact","constructData","valid","validateContact","val","clone","is","notifications","schema","process","$contact","text","controls","fieldError","element","error","self","contactData","new_contact","old_data","authentication","unset","loadLock","save","always","then","response","message","alerts","success","fail","handleError","code","$","trim","toUpperCase","session","verifyCode","closeModal","views","currentView","currentTab","refresh"],"mappings":"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","file":"ModalContactView.js","sourcesContent":["/**\n * ModalContactView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'text!templates/modals/modal-contact.html'\n],\nfunction(\n  app, \n  ModalView,\n  ModalContactTemplate\n) {\n\n  return ModalView.extend({\n\n    className: 'user',\n    \n    'events': {\n      'change input.contact': 'validateContact',\n    },\n\n    template: _.template(ModalContactTemplate),\n\n    title: function() {\n      var action = app.utils.capitalize(this.action); // ie. Edit\n      var method = app.utils.capitalize(this.method); // ie. Email\n\n      return action + ' ' + method;\n    },\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var data = this.context.model.toJSON();\n      var AccountModel = app.models.AccountModel;\n      \n      this.model = new AccountModel(data, {\n        action: this.method\n      });\n\n      this.renderModalView();\n    },\n\n    render: function() {\n      var self = this;\n      \n      var contact;\n      var notify = this.context.model.get('notifications.' + [this.method]);\n\n      if (this.method === 'phone') {\n        contact = this.context.model.get('phone');\n      } else if (this.method === 'email') {\n        contact = this.context.model.get('email');\n      }\n\n      this.ready({\n        action: this.action, \n        method: this.method,\n        contact: contact,\n        notify: notify\n      });\n\n      // mask code\n      this.$el.find('.code').mask('ZZZâ€“ZZZ', {\n        'translation': {\n          Z: {\n            pattern: /[A-Za-z0-9]/\n          },\n        }\n      });\n\n      this.$el.find('.modal').addClass('start');\n\n      if (this.action === 'verify') {\n        this.$el.find('.modal').removeClass('start').addClass('sent');\n        this.$el.find('input.contact').prop('disabled', true);\n      }\n\n      return this;\n    },\n\n    confirm: function() {\n      if (this.$el.find('.modal').hasClass('start')) {\n        this.submitContact();\n      } else if (this.$el.find('.modal').hasClass('sent')) {\n        this.verifyContact();\n      }\n    },\n    \n    constructData: function() {\n      // can't efficiently use serializeObject here because we need to extend \n      // the existing preferences\n      \n      var valid = this.validateContact();\n      if (!valid) return;\n\n      var user = this.model.clone();\n      var val = this.$el.find('#notifications').is(':checked') ? true : false;\n\n      var data = valid;\n      // data.notifications = _.extend({}, user.get('notifications'));\n      data.notifications = {};\n      data.notifications[this.method] = val;\n\n      return app.schema.process(data, this.model);\n    },\n\n    validateContact: function() {\n      var $contact = this.$el.find('input.contact');\n      var valid = app.utils.validateContact($contact.val(), true);\n\n      if (valid) {\n        this.$el.find('.contact-display').text($contact.val());\n        return valid;\n      } else {\n        app.controls.fieldError({\n          element: $contact,\n          error: 'Please enter valid contact data'\n        });\n        return false;\n      }\n    },\n\n    submitContact: function() {\n\n      var self = this;\n\n      var contactData = this.constructData();\n      if (!contactData) return;\n\n      // HACK: gotta unset the contact field on the client side to make sure it\n      // will still send if the contact method is the same as the old one\n      \n      var new_contact = contactData[this.method];\n      var old_data = this.model.toJSON();\n\n      if (old_data.authentication) {\n        if (new_contact !== old_data.authentication[this.method] &&\n        new_contact === old_data[this.method]) {\n          this.model.unset(this.method);\n        }\n      }\n\n      app.controls.loadLock(true);\n\n      this.model.save(contactData).always(function() {\n\n        app.controls.loadLock(false);\n\n      }).then(function(response) {\n\n        var message = '';\n\n        if (response.action === 'authentication_request_sent') {\n          message = 'Thanks, we sent you a';\n          message += self.method === 'phone' ? ' text message' : 'n email';\n          message += ' with a verification code.';\n        } else {\n          message += 'Thank you, your contact preferences have been updated.';\n        }\n\n        app.alerts.success(message);\n\n        self.$el.find('.modal').removeClass('start').addClass('sent');\n        self.$el.find('input.contact').prop('disabled', true);\n\n        // self.action = 'verify';\n        // self.render();\n        // app.views.currentView.currentTab.initialize({ refresh: true });\n        // app.views.currentView.initialize();\n        // self.closeModal();\n\n      }).fail(function(error) {\n        app.controls.handleError(error);\n        // self.closeModal();\n      });\n    },\n\n    verifyContact: function() {\n      var self = this;\n      var code = $.trim(this.$el.find('.code').val().toUpperCase());\n\n      var $contact = this.$el.find('input.contact');\n      var contactData = app.utils.validateContact($contact.val(), true);\n      contactData.code = code;\n\n      app.session.verifyCode(contactData).then(function(response) {\n        self.closeModal();\n        app.views.currentView.currentTab.initialize({ refresh: true });\n        app.alerts.success('Your contact information has been verified!');\n      }).fail(function() {\n        app.alerts.error('Something went wrong');\n      });\n    }\n\n  });\n});"]}