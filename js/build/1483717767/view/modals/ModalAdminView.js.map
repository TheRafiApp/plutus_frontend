{"version":3,"sources":["view/modals/ModalAdminView.js"],"names":["define","app","ModalView","ModalInviteTemplate","extend","title","this","action","role","template","_","initialize","_options","self","utils","capitalize","context","modelName","loadModel","get","then","UserModel","model","renderModalView","render","ready","controls","renderPasswordFields"],"mappings":"AAIAA,QACE,MACA,wBACA,0CAEF,SAASC,EAAKC,EAAWC,GAEvB,MAAOD,GAAUE,QAEfC,MAAO,WACL,MAAOC,MAAKC,OAAS,IAAMD,KAAKE,MAGlCC,SAAUC,EAAED,SAASN,GAErBQ,WAAY,SAASC,GACfA,GAAUF,EAAEN,OAAOE,KAAMM,EAE7B,IAAIC,GAAOP,IAGXA,MAAKE,KAAOP,EAAIa,MAAMC,WAAWT,KAAKU,QAAQC,WAE9ChB,EAAIa,MAAMI,UAAUC,IAAI,SAAWb,KAAKE,KAAO,SAASY,KAAK,SAASC,GACpER,EAAKS,MAAQ,GAAID,GACjBR,EAAKU,qBAITC,OAAQ,WAON,MAJAlB,MAAKmB,QAELxB,EAAIyB,SAASC,qBAAqBrB,MAE3BA","file":"ModalAdminView.js","sourcesContent":["/**\n * ModalAdminView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'text!templates/modals/modal-admin.html'\n],\nfunction(app, ModalView, ModalInviteTemplate) {\n\n  return ModalView.extend({\n\n    title: function() {\n      return this.action + ' ' + this.role;\n    },\n\n    template: _.template(ModalInviteTemplate),\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n\n      // dynamically load model\n      this.role = app.utils.capitalize(this.context.modelName);\n\n      app.utils.loadModel.get('users/' + this.role + 'Model').then(function(UserModel) {\n        self.model = new UserModel();\n        self.renderModalView();\n      });\n    },\n\n    render: function() {\n      var self = this;\n\n      this.ready();\n\n      app.controls.renderPasswordFields(this);\n\n      return this;\n    },\n\n    // confirm: function() {\n    //   var self = this;\n    //   var error = false;\n\n    //   var pw = this.$el.find('.password');\n\n    //   if (!Backbone.Validation.patterns.password.test(pw.val())) {\n    //     app.controls.fieldError({\n    //       element: pw,\n    //       error: Backbone.Validation.messages.password\n    //     });\n    //     error = true;\n    //   }\n\n    //   var formData = this.constructData();\n\n    //   if (!app.utils.validate(this, formData)) return false;\n\n    //   if (error) return;\n      \n    //   app.controls.loadLock(true);\n\n    //   this.model.save(formData).always(function() {\n    //     app.controls.loadLock(false);\n    //   }).then(function() {\n    //     self.context.trigger(self.eventName);\n    //     self.closeModal();\n    //     app.alerts.success(self.messages.success);\n    //   }).fail(function(error) {\n    //     self.handleError(error);\n    //   });\n    // },\n    \n  });\n});"]}