{"version":3,"sources":["view/modals/ModalDisbursalView.js"],"names":["define","app","ModalView","DisbursalModel","DateView","ModalTemplate","extend","template","_","initialize","_options","this","model","renderModalView","render","selected","properties","views","currentView","tableView","collection","toJSON","ready","$el","find","html","name","context"],"mappings":"AAIAA,QACE,MACA,wBACA,kCACA,+BACA,8CAEF,SAASC,EAAKC,EAAWC,EAAgBC,EAAUC,GAEjD,MAAOH,GAAUI,QASfC,SAAUC,EAAED,SAASF,GAarBI,WAAY,SAASC,GACfA,GAAUF,EAAEF,OAAOK,KAAMD,EAG7BC,MAAKC,MAAQ,GAAIT,GAEjBQ,KAAKE,mBAGPC,OAAQ,WAQN,GAAIC,IAAW,EAEXC,EAAaf,EAAIgB,MAAMC,YAAYC,UAAUC,WAAWC,QAqB5D,OAnBIV,MAAKI,WAAUA,EAAWJ,KAAKI,UAEnCJ,KAAKW,OACHN,WAAYA,EACZD,SAAUA,IAIZJ,KAAKY,IAAIC,KAAK,gBAAgBC,KAAK,GAAIrB,IACrCsB,KAAM,OACNC,QAAShB,OACRY,KAQIZ","file":"ModalDisbursalView.js","sourcesContent":["/**\n * ModalDisbursalView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'model/properties/DisbursalModel',\n  'view/repeaters/date-calendar',\n  'text!templates/modals/modal-disbursal.html'\n],\nfunction(app, ModalView, DisbursalModel, DateView, ModalTemplate) {\n\n  return ModalView.extend({\n\n    // 'events': {\n    //   'keyup': 'keyControl',\n    //   'click .action-confirm': 'confirm',\n    //   'click .action-cancel': 'closeModal',\n    //   'click .overlay': 'closeModal'\n    // },\n\n    template: _.template(ModalTemplate),\n\n    // keyControl: function(e) {\n    //   if (app.utils.getFocused().parentNode.className.contains('actions')) return;\n    //   // esc\n    //   if (e.which === 27) {\n    //     this.closeModal();\n    //   // enter\n    //   } else if (e.which === 13) {\n    //     this.confirm();\n    //   }\n    // },\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n      this.model = new DisbursalModel();\n\n      this.renderModalView();\n    },\n\n    render: function() {\n      // var self = this;\n\n      // Backbone.Validation.bind(this);\n      \n      // app.views.appView.trigger('modalOpened');\n      // app.views.modalView = this;\n\n      var selected = false;\n\n      var properties = app.views.currentView.tableView.collection.toJSON();\n\n      if (this.selected) selected = this.selected;\n\n      this.ready({\n        properties: properties, \n        selected: selected\n      });\n\n      // init datepicker\n      this.$el.find('.date-picker').html(new DateView({\n        name: 'date',\n        context: this\n      }).$el);\n\n      // app.utils.prepInputs(this);\n\n      // $('.modal-container').html(this.$el).addClass('visible');\n\n      // app.controls.maskMoney('.amount', this, 10);\n\n      return this;\n    },\n\n    // constructData: function() {\n    //   var $form = this.$el.find('form');\n    //   var formData = $form.serializeObject();\n\n    //   return app.schema.process(formData, this.model);\n    // },\n\n    // closeModal: function() {\n    //   $('.modal-container').removeClass('visible');\n    //   app.views.appView.trigger('modalClosed');\n    //   this.close();\n    // },\n\n    // confirm: function() {\n    //   var self = this;\n      \n    //   var formData = this.constructData();\n\n    //   if (!app.utils.validate(this, formData)) return false;\n\n    //   this.model.save(formData).then(function() {\n    //     self.context.trigger(self.eventName);\n    //     self.closeModal();\n    //   }, function() {\n    //     console.warn(arguments);\n    //   });\n    // }\n\n  });\n});"]}