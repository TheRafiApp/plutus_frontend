{"version":3,"sources":["view/modals/ModalTransferView.js"],"names":["define","app","ModalView","FundingSourcesCollection","TransferModel","DateView","ModalTransferTemplate","extend","events","blur .amount","title","label","this","type","action","template","_","initialize","_options","self","model","funding_sources","fetch","then","renderModalView","validateAmount","e","amount","$","currentTarget","val","invalid","utils","validateMoney","controls","fieldError","element","error","render","toJSON","primary_id","session","user","get","primary_fs","find","funding_source","id","options","company","destination","managers","source","context","tenants","ready","$el","html","name","confirm","formData","constructData","bill","validate","addClass","save","balance","set","updated","moment","utc","toISOString","display_balance","unset","silent","wait","removeClass","trigger","eventName","closeModal","fail","console","warn","arguments"],"mappings":"AAIAA,QACE,MACA,wBACA,8CAEA,gCACA,+BACA,6CAEF,SACEC,EACAC,EACAC,EAEAC,EACAC,EACAC,GAGA,MAAOJ,GAAUK,QAEfC,QACEC,eAAgB,kBAGlBC,MAAO,WACL,GAAIC,GAAsB,YAAdC,KAAKC,KAAqBD,KAAKC,KAAO,EAClD,OAAOD,MAAKE,OAAS,IAAMH,EAAQ,YAGrCI,SAAUC,EAAED,SAAST,GAErBW,WAAY,SAASC,GACfA,GAAUF,EAAET,OAAOK,KAAMM,EAE7B,IAAIC,GAAOP,IAINA,MAAKQ,QAAOR,KAAKQ,MAAQ,GAAIhB,GAAc,MAC9CU,OAAQ,SAQVF,KAAKS,gBAAkB,GAAIlB,GAQ3BS,KAAKS,gBAAgBC,QAAQC,KAAK,WAChCJ,EAAKK,qBAITC,eAAgB,SAASC,GACvB,GAAIC,GAASC,EAAEF,EAAEG,eAAeC,MAC5BC,EAAU9B,EAAI+B,MAAMC,cAAcN,EAElCI,IACF9B,EAAIiC,SAASC,YACXC,QAASR,EAAEF,EAAEG,eACbhB,KAAM,QACNwB,MAAON,KAKbO,OAAQ,WAEN,GAAIjB,GAAkBT,KAAKS,gBAAgBkB,SAEvCC,EAAavC,EAAIwC,QAAQC,KAAKC,IAAI,yCAClCC,EAAavB,EAAgBwB,KAAK,SAASC,GAC7C,MAAOA,GAAeC,KAAOP,IAG3BQ,GACFnC,KAAMD,KAAKC,KACXc,OAAQf,KAAKe,OACbsB,QAAShD,EAAIwC,QAAQC,KAAKC,IAAI,WAC9BC,WAAYA,EAmBd,OAhBkB,eAAdhC,KAAKC,KACPmC,EAAQE,YAActC,KAAKuC,SAASZ,SACb,YAAd3B,KAAKC,OACdmC,EAAQI,OAASxC,KAAKyC,QAAQC,SAGhC1C,KAAK2C,MAAMP,GAEO,YAAdpC,KAAKC,MAEPD,KAAK4C,IAAIX,KAAK,gBAAgBY,KAAK,GAAIpD,IACrCqD,KAAM,OACNL,QAASzC,OACR4C,KAGE5C,MAGT+C,QAAS,WACP,GAAIxC,GAAOP,KACPgD,EAAWhD,KAAKiD,eAGpB,OAFkB,YAAdjD,KAAKC,OAAoB+C,EAASE,KAAOlD,KAAKyC,QAAQjC,MAAMuB,IAAI,UAE/D1C,EAAI+B,MAAM+B,SAASnD,KAAMgD,KAQ9BhD,KAAK4C,IAAIX,KAAK,UAAUmB,SAAS,eAEjCpD,MAAKQ,MAAM6C,KAAKL,GAAUrC,KAAK,WAE7B,GAAII,GAASiC,EAASjC,OAClBuC,EAAU/C,EAAKC,MAAMuB,IAAI,kBAC7BxB,GAAKC,MAAM+C,KACTC,QAAWC,OAAOC,MAAMC,cACxBC,gBAAmBN,EAAUvC,IAE/BR,EAAKC,MAAMqD,MAAM,UAAYC,QAAQ,IACrCvD,EAAKqC,IAAIX,KAAK,UAAUmB,SAAS,WAEjC/D,EAAIiC,SAASyC,KAAK,MAAMpD,KAAK,WAC3BJ,EAAKqC,IAAIX,KAAK,UAAU+B,YAAY,mBACpCzD,EAAKkC,QAAQwB,QAAQ1D,EAAK2D,WAC1B3D,EAAK4D,iBAGNC,KAAK,WACNC,QAAQC,KAAKC","file":"ModalTransferView.js","sourcesContent":["/**\n * ModalTransferView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'collection/account/FundingSourcesCollection',\n  // 'collection/users/ManagersCollection',\n  'model/transfers/TransferModel',\n  'view/repeaters/date-calendar',\n  'text!templates/modals/modal-transfer.html'\n],\nfunction(\n  app,\n  ModalView, \n  FundingSourcesCollection,\n  // ManagersCollection, \n  TransferModel, \n  DateView, \n  ModalTransferTemplate\n) {\n\n  return ModalView.extend({\n\n    'events': { \n      'blur .amount': 'validateAmount'\n    },\n\n    title: function() {\n      var label = this.type === 'offline' ? this.type : '';\n      return this.action + ' ' + label + ' Payment';\n    },\n    \n    template: _.template(ModalTransferTemplate),\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n\n      // var promises = app.utils.promises(2);\n\n      if (!this.model) this.model = new TransferModel(null, {\n        action: 'add'\n      });\n\n      // this.managers = new ManagersCollection();\n      // this.managers.fetch().then(function() {\n      //   promises[0].resolve();\n      // });\n\n      this.funding_sources = new FundingSourcesCollection();\n      // this.funding_sources.fetch().then(function() {\n      //   promises[1].resolve();\n      // });\n\n      // $.when.apply($, promises).then(function() {\n      //   self.renderModalView();\n      // });\n      this.funding_sources.fetch().then(function() {\n        self.renderModalView();\n      });\n    },\n\n    validateAmount: function(e) {\n      var amount = $(e.currentTarget).val();\n      var invalid = app.utils.validateMoney(amount);\n      \n      if (invalid) {\n        app.controls.fieldError({\n          element: $(e.currentTarget),\n          type: 'error',\n          error: invalid\n        });\n      }\n    },\n\n    render: function() {\n\n      var funding_sources = this.funding_sources.toJSON();\n\n      var primary_id = app.session.user.get('dwolla_account.primary_funding_source');\n      var primary_fs = funding_sources.find(function(funding_source) {\n        return funding_source.id === primary_id;\n      });\n\n      var options = {\n        type: this.type,\n        amount: this.amount,\n        company: app.session.user.get('company'),\n        primary_fs: primary_fs\n      };\n\n      if (this.type === 'electronic') {\n        options.destination = this.managers.toJSON();\n      } else if (this.type === 'offline') {\n        options.source = this.context.tenants;\n      }\n\n      this.ready(options);\n\n      if (this.type === 'offline') {\n        // init datepicker\n        this.$el.find('.date-picker').html(new DateView({\n          name: 'date',\n          context: this\n        }).$el);\n      }\n\n      return this;\n    },\n\n    confirm: function() {\n      var self = this;\n      var formData = this.constructData();\n      if (this.type === 'offline') formData.bill = this.context.model.get('_id');\n\n      if (!app.utils.validate(this, formData)) return false;\n\n      // var microdeposits = app.session.user.get('dwolla_account.microdeposits');\n      // if (microdeposits && this.type !== 'offline') {\n      //   app.alerts.error('Your bank account is unverified, please use microdeposits to verify before proceeding');\n      //   return;\n      // }\n\n      this.$el.find('.modal').addClass('loading');\n\n      this.model.save(formData).then(function() {\n        // we dont actually want this data on the model...\n        var amount = formData.amount;\n        var balance = self.model.get('display_balance');\n        self.model.set({\n          'updated': moment.utc().toISOString(),\n          'display_balance': balance - amount\n        });\n        self.model.unset('amount', { silent: true });\n        self.$el.find('.modal').addClass('success');\n\n        app.controls.wait(1900).then(function() {\n          self.$el.find('.modal').removeClass('loading success');\n          self.context.trigger(self.eventName);\n          self.closeModal();\n        });\n        \n      }).fail(function() {\n        console.warn(arguments);\n      });\n    }\n\n  });\n});"]}