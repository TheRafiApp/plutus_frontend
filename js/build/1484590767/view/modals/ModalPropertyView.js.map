{"version":3,"sources":["view/modals/ModalPropertyView.js"],"names":["define","app","GoogleMapsPlaces","ModalView","PropertyModel","FundingSourcesCollection","ModalPropertyTemplate","extend","events","click .action-confirm","change input[name=\"pay_into_target\"]","change .companies","messages","success","error","template","_","title","this","action","initialize","_options","self","model","collection","controls","smartRender","admin","then","renderModalView","render","eventName","companies","property","toJSON","collections","funding_sources","ready","user","session","setAddress","isSuperAdmin","companiesChange","initMap","updatePayInto","e","value","$","currentTarget","val","$el","find","show","hide","fields","forEach","field","setPlace","infowindow","close","marker","setVisible","place","autocomplete","getPlace","address_components","components","each","k","v1","types","k2","v2","long_name","geometry","address","name","city","locality","sublocality","state","administrative_area_level_1","zip","postal_code","country","political","place_id","setMarker","wait","fieldError","element","viewport","map","fitBounds","setCenter","location","setZoom","setIcon","url","icon","size","google","maps","Size","origin","Point","anchor","scaledSize","setPosition","short_name","join","setContent","open","geocodePlaceId","geocoder","geocode","placeId","results","status","GeocoderStatus","OK","Marker","position","formatted_address","window","alert","Map","center","lat","lng","streetViewControl","mapTypeControl","zoomControl","zoom","styles","featureType","elementType","stylers","color","saturation","lightness","weight","visibility","setOptions","Geocoder","input","options","componentRestrictions","places","Autocomplete","bindTo","InfoWindow","anchorPoint","addListener","get","constructData","$form","formData","serializeObject","is","dwolla","funding_source","pay_into_target"],"mappings":"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","file":"ModalPropertyView.js","sourcesContent":["/**\n * ModalPropertyView.js\n */\n\ndefine([\n  'app',\n  'async!https://maps.googleapis.com/maps/api/js?key=AIzaSyAK_nfRIH9in6hPb1UxtyDL6FMCHANm6n4&libraries=places&callback=initMap',\n  'view/modals/ModalView',\n  'model/properties/PropertyModel',\n  'collection/account/FundingSourcesCollection',\n  // 'collection/users/LandlordsCollection',\n  // 'text!templates/landlords/select.html',\n  'text!templates/modals/modal-property.html'\n],\nfunction(\n  app, \n  GoogleMapsPlaces, \n  ModalView,\n  PropertyModel, \n  FundingSourcesCollection,\n  // LandlordsCollection, \n  // LandlordsSelectTemplate, \n  ModalPropertyTemplate\n) {\n\n  return ModalView.extend({\n\n    // className: 'modal property',\n\n    'events': {\n      'click .action-confirm': 'confirm',\n      'change input[name=\"pay_into_target\"]': 'updatePayInto',\n      'change .companies': 'companiesChange'\n    },\n\n    messages: {\n      success: 'The property has been saved',\n      error: 'The property could not be saved'\n    },\n\n    template: _.template(ModalPropertyTemplate),\n\n    title: function() {\n      return this.action + ' Property';\n    },\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n      if (!this.model) this.model = new PropertyModel();\n      \n      // this.collection = new LandlordsCollection();\n      this.collection = new FundingSourcesCollection();\n\n      app.controls.smartRender(self, {\n        admin: [ this.collection ]\n      }).then(function() {\n        self.renderModalView();\n      });\n      \n    },\n\n    render: function() {\n      var self = this;\n\n      if (!this.eventName) this.eventName = 'confirm';\n\n      var property = this.model.toJSON();\n\n      var companies;\n      if (app.collections.companies) companies = app.collections.companies.toJSON();\n\n      var funding_sources = this.collection.toJSON();\n\n      this.ready({\n        user: app.session.user.toJSON(),\n        property: property,\n        companies: companies,\n        funding_sources: funding_sources\n      });\n\n      if (property) {\n        this.setAddress(property);\n      }\n\n      if (app.session.isSuperAdmin()) {\n        this.companiesChange();\n      } else {\n        // this.renderPayInto();\n        // var selected = this.model.get('landlord._id');\n\n        // this.$el.find('.landlords').html(this.landlords_template({\n        //   selected: selected,\n        //   landlords: this.collection.toJSON()\n        // }));\n      }\n\n      this.initMap();\n\n      return this;\n    },\n\n    updatePayInto: function(e) {\n      var value = $(e.currentTarget).val();\n\n      if (value === 'true') {\n        this.$el.find('.pay-into .dropdown').show();\n      } else {\n        this.$el.find('.pay-into .dropdown').hide();\n      }\n    },\n\n    // renderPayInto: function() {\n    //   if (this.model.get('funding_source')) {\n    //     this.$el.find('.specific').prop('checked', true);\n    //   }\n    // },\n\n    setAddress: function(property) {\n      var self = this;\n      \n      var fields = [\n        'address',\n        'city',\n        'state',\n        'zip',\n        'country'\n      ];\n\n      fields.forEach(function(field) {\n        self[field] = property[field];\n      });\n    },\n\n    initMap: function() {\n\n      var self = this;\n\n      var map = new google.maps.Map(this.$el.find('.map')[0], {\n        center: { lat: 42.369117, lng: -71.062658 },\n        streetViewControl: false,\n        mapTypeControl: false,\n        zoomControl: false,\n        zoom: 13\n      });\n\n      var styles = [{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#70bdf0\"},{\"saturation\":\"-22\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f7f7f7\"},{\"lightness\":20}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#dedede\"},{\"lightness\":17}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#dedede\"},{\"lightness\":29},{\"weight\":0.2}]},{\"featureType\":\"road.arterial\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#dedede\"},{\"lightness\":18}]},{\"featureType\":\"road.local\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#ffffff\"},{\"lightness\":16}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f1f1f1\"},{\"lightness\":21}]},{\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#ffffff\"},{\"lightness\":16}]},{\"elementType\":\"labels.text.fill\",\"stylers\":[{\"saturation\":36},{\"color\":\"#333333\"},{\"lightness\":40}]},{\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"transit\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f2f2f2\"},{\"lightness\":19}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#fefefe\"},{\"lightness\":20}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#fefefe\"},{\"lightness\":17},{\"weight\":1.2}]}];\n      map.setOptions({ styles: styles });\n\n      var geocoder = new google.maps.Geocoder();\n      var input = this.$el.find('.address-selector')[0];\n\n      var options = {\n        types: ['address'],\n        componentRestrictions: {\n          country: 'usa'\n        }\n      };\n\n      var autocomplete = new google.maps.places.Autocomplete(input, options);\n      autocomplete.bindTo('bounds', map);\n\n      var infowindow = new google.maps.InfoWindow();\n      var marker = new google.maps.Marker({\n        map: map,\n        anchorPoint: new google.maps.Point(0, -29)\n      });\n\n      function setPlace() {\n        infowindow.close();\n        marker.setVisible(false);\n          \n        var place = autocomplete.getPlace();\n\n        var address_components = place.address_components;\n        var components = {}; \n        $.each(address_components, function(k,v1) {\n          $.each(v1.types, function(k2, v2) {\n            components[v2] = v1.long_name;\n          });\n        });\n\n        if (!place.geometry) {\n          \n          // This requires a delay to avoid the race condition on a change event\n          app.controls.wait(200).then(function() {\n            app.controls.fieldError({\n              element: '.address-selector',\n              error: 'Please select an address from the autocomplete menu' \n            });\n          });\n\n          return;\n        }\n\n        self.address = place.name;\n        self.city = components.locality || components.sublocality;\n        self.state = components.administrative_area_level_1;\n        self.zip = components.postal_code;\n        self.country = components.political;\n        self.place_id = place.place_id;\n\n        // If the place has a geometry, then present it on a map.\n        setMarker(place);\n        \n      }\n\n      function setMarker(place) {\n        if (place.geometry.viewport) {\n          map.fitBounds(place.geometry.viewport);\n        } else {\n          map.setCenter(place.geometry.location);\n          map.setZoom(17);  // Why 17? Because it looks good.\n        }\n        marker.setIcon(/** @type {google.maps.Icon} */({\n          url: place.icon,\n          size: new google.maps.Size(71, 71),\n          origin: new google.maps.Point(0, 0),\n          anchor: new google.maps.Point(17, 34),\n          scaledSize: new google.maps.Size(35, 35)\n        }));\n        marker.setPosition(place.geometry.location);\n        marker.setVisible(true);\n\n        var address = '';\n        if (place.address_components) {\n          address = [\n            (place.address_components[0] && place.address_components[0].short_name || ''),\n            (place.address_components[1] && place.address_components[1].short_name || ''),\n            (place.address_components[2] && place.address_components[2].short_name || '')\n          ].join(' ');\n        }\n\n        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);\n        infowindow.open(map, marker);\n      }\n\n      function geocodePlaceId(place_id, geocoder, map, infowindow) {\n        geocoder.geocode({'placeId': place_id}, function(results, status) {\n          if (status === google.maps.GeocoderStatus.OK) {\n            if (results[0]) {\n              map.setZoom(11);\n              map.setCenter(results[0].geometry.location);\n              var marker = new google.maps.Marker({\n                map: map,\n                position: results[0].geometry.location\n              });\n              infowindow.setContent(results[0].formatted_address);\n              infowindow.open(map, marker);\n            } else {\n              window.alert('No results found');\n            }\n          } else {\n            window.alert('Geocoder failed due to: ' + status);\n          }\n        });\n      }\n\n      // Run this shit\n\n      autocomplete.addListener('place_changed', setPlace);\n\n      var place_id = this.model.get('place_id');\n      if (place_id) geocodePlaceId(place_id, geocoder, map, infowindow);\n    },\n\n    companiesChange: function() {\n      // var company_id = this.$el.find('.companies').val();\n      // var landlords = this.collection.where({ company_id: company_id });\n\n      // var selected = this.model.get('landlord._id');\n\n      // this.$el.find('.landlords').html(this.landlords_template({\n      //   landlords: JSON.parse(JSON.stringify(landlords)),\n      //   selected: selected\n      // }));\n    },\n\n    constructData: function() {\n      var $form = this.$el.find('form');\n\n      var formData = $form.serializeObject();\n\n      formData.address = this.address;\n      formData.city = this.city;\n      formData.state = this.state;\n      formData.zip = this.zip;\n      formData.country = this.country;\n      formData.place_id = this.place_id;\n\n      if (this.$el.find('#default').is(':checked'))\n        formData.dwolla.funding_source = null;\n\n      delete formData.pay_into_target;\n\n      return formData;\n    },\n\n    // confirm: function() {\n    //   var self = this;\n\n    //   var formData = this.constructData();\n\n    //   if (!app.utils.validate(this, formData)) return false;\n\n    //   this.model.save(formData).then(function() {\n    //     self.context.trigger(self.eventName);\n    //     self.closeModal();\n    //   }, function() {\n    //     console.warn(arguments);\n    //   });\n    // }\n\n  });\n});"]}