{"version":3,"sources":["view/WebhookView.js"],"names":["define","app","WebhookTemplate","Backbone","View","extend","className","events","click .action-delete","click .action-unpause","click .action-pause","template","_","initialize","options","this","on","delete","pause","render","data","model","toJSON","$el","html","webhook","promptDelete","target","get","message","controls","modalConfirm","self","url","JSON","stringify","destroy","then","fadeOut","console","log","arguments","alerts","error","promptPause","setSubscriptionState","parentView","fail","unpause","state","utils","request","path","id","method","paused"],"mappings":"AAIAA,QACE,MACA,wCAEF,SAASC,EAAKC,GAEZ,MAAOC,UAASC,KAAKC,QAEnBC,UAAW,UAEXC,QACEC,uBAAwB,eACxBC,wBAAyB,UACzBC,sBAAuB,eAGzBC,SAAUC,EAAED,SAAST,GAErBW,WAAY,SAASC,GACfA,GAASF,EAAEP,OAAOU,KAAMD,EAG5BC,MAAKC,GAAG,gBAAiBD,KAAKE,OAAQF,MACtCA,KAAKC,GAAG,eAAgBD,KAAKG,MAAOH,MACpCA,KAAKI,UAGPA,OAAQ,WACN,GACIC,GAAOL,KAAKM,MAAMC,QAItB,OAFAP,MAAKQ,IAAIC,KAAKT,KAAKJ,UAAWc,QAASL,KAEhCL,MAGTW,aAAc,WACZ,GAAIC,GAASZ,KAAKM,MAAMO,IAAI,OACxBC,EAAU,mCAAqCF,EAAS,GAE5D1B,GAAI6B,SAASC,aAAaF,EAAS,gBAAiBd,OAGtDE,OAAQ,WACN,GAAIe,GAAOjB,KAEPK,GACFa,IAAKD,EAAKX,MAAMO,IAAI,OAGtBR,GAAOc,KAAKC,UAAUf,GAEtBL,KAAKM,MAAMe,SACThB,KAAMA,IACLiB,KAAK,WACNL,EAAKT,IAAIe,QAAQ,iBACRN,MAGR,WACDO,QAAQC,IAAIC,WACZxC,EAAIyC,OAAOC,MAAM,kCAIrBC,YAAa,WACX,GAAIjB,GAASZ,KAAKM,MAAMO,IAAI,OACxBC,EAAU,kCAAoCF,EAAS,GAE3D1B,GAAI6B,SAASC,aAAaF,EAAS,eAAgBd,OAGrDG,MAAO,WACL,GAAIc,GAAOjB,IACXA,MAAK8B,sBAAqB,GAAMR,KAAK,WACnCL,EAAKc,WAAWjC,eACfkC,KAAK,WACN9C,EAAIyC,OAAOC,MAAM,8BAIrBK,QAAS,WACP,GAAIhB,GAAOjB,IAEXA,MAAK8B,sBAAqB,GAAOR,KAAK,WACrCL,EAAKc,WAAWjC,eACdkC,KAAK,WACN9C,EAAIyC,OAAOC,MAAM,gCAIrBE,qBAAsB,SAASI,GAC7B,MAAOhD,GAAIiD,MAAMC,SACfC,KAAM,wBAA0BrC,KAAKM,MAAMgC,GAC3CC,OAAQ,MACRlC,MACEmC,OAAQN","file":"WebhookView.js","sourcesContent":["/**\n * WebhookView.js\n */\n\ndefine([\n  'app',\n  'text!templates/webhooks/webhook.html'\n],\nfunction(app, WebhookTemplate) {\n\n  return Backbone.View.extend({\n\n    className: 'webhook',\n\n    events: {\n      'click .action-delete': 'promptDelete',\n      'click .action-unpause': 'unpause',\n      'click .action-pause': 'promptPause'\n    },\n\n    template: _.template(WebhookTemplate),\n\n    initialize: function(options) {\n      if (options) _.extend(this, options);\n\n      var self = this;\n      this.on('confirmDelete', this.delete, this);\n      this.on('confirmPause', this.pause, this);\n      this.render();\n    },\n\n    render: function() {\n      var self = this;\n      var data = this.model.toJSON();\n \n      this.$el.html(this.template({ webhook: data }));\n\n      return this;\n    },\n\n    promptDelete: function() {\n      var target = this.model.get('url');\n      var message = 'Are you sure you want to delete ' + target + '?';\n\n      app.controls.modalConfirm(message, 'confirmDelete', this);\n    },\n\n    delete: function() {\n      var self = this;\n\n      var data = {\n        url: self.model.get('url')\n      };\n\n      data = JSON.stringify(data);\n\n      this.model.destroy({ \n        data: data\n      }).then(function() {\n        self.$el.fadeOut(function() {\n          delete self;\n        });\n        //self.parentView.render();\n      }, function() {\n        console.log(arguments);\n        app.alerts.error('Couldn\\'t delete the webhook');\n      });\n    },\n\n    promptPause: function() {\n      var target = this.model.get('url');\n      var message = 'Are you sure you want to pause ' + target + '?';\n\n      app.controls.modalConfirm(message, 'confirmPause', this);\n    },\n\n    pause: function() {\n      var self = this;\n      this.setSubscriptionState(true).then(function() {\n        self.parentView.initialize();\n      }).fail(function() {\n        app.alerts.error('Could not pause webhook');\n      });\n    },\n\n    unpause: function() {\n      var self = this;\n\n      this.setSubscriptionState(false).then(function() {\n       self.parentView.initialize();\n      }).fail(function() {\n        app.alerts.error('Could not unpause webhook');\n      });\n    },\n\n    setSubscriptionState: function(state) {\n      return app.utils.request({\n        path: 'dwolla/subscriptions/' + this.model.id,\n        method: 'PUT',\n        data: {\n          paused: state\n        }\n      });\n    }\n\n  });\n});"]}