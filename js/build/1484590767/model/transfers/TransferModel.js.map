{"version":3,"sources":["model/transfers/TransferModel.js"],"names":["define","app","TransferModel","Model","extend","name","displayName","urlRoot","API","schema","amount","type","date","validation","utils","validateMoney","filters","search_filters","source_name","Backbone","computed","this","isNew","source","get","first_name","last_name","destination_name","destination","amount_pretty","prettyMoney","amount_int","parseFloat","cancelTransfer","request","path","id","method"],"mappings":"AAIAA,QACC,OAED,SAASC,GAER,GAAIC,GAAgBD,EAAIE,MAAMC,QAE3BC,KAAM,WACNC,YAAa,gBAEbC,QAAS,WACP,MAAON,GAAIO,MAAQ,cAGrBC,QACEC,QACEC,KAAM,YAERC,MACED,KAAM,QAIVE,YACEH,OAAQT,EAAIa,MAAMC,eAGpBC,SACE,gBACA,aACA,cACA,mBACA,iBACA,wBACA,YACA,qBACA,oBAGFC,gBACE,MAEA,UACA,aAEA,cACA,iBAEA,iBACA,wBACA,YACA,qBACA,mBAEA,SACA,YAEA,UACA,WAGFC,YAAaC,SAASC,SAAS,SAAU,WACvC,GAAIC,KAAKC,QAAS,MAAO,EACzB,IAAIC,GAASF,KAAKG,IAAI,SACtB,IAAKD,EACL,MAAOA,GAAOE,WAAa,IAAOF,EAAOG,YAG3CC,iBAAkBR,SAASC,SAAS,cAAe,WACjD,GAAIC,KAAKC,QAAS,MAAO,EACzB,IAAIM,GAAcP,KAAKG,IAAI,cAC3B,IAAKI,EACL,MAAOA,GAAYH,WAAa,IAAOG,EAAYF,YAGrDG,cAAeV,SAASC,SAAS,SAAU,WACzC,GAAIV,GAASW,KAAKG,IAAI,SACtB,OAAIH,MAAKC,UAAYZ,EAAe,GAE7BT,EAAIa,MAAMgB,YAAYpB,KAG/BqB,WAAYZ,SAASC,SAAS,SAAU,WACtC,GAAIV,GAASW,KAAKG,IAAI,eACtB,OAAIH,MAAKC,UAAYZ,EAAe,GAE7BsB,WAAWtB,KAsBpBuB,eAAgB,WAMd,MAAOhC,GAAIa,MAAMoB,SACfC,KAAM,mBAAqBd,KAAKe,GAAK,UACrCC,OAAQ,WAMf,OAAOnC","file":"TransferModel.js","sourcesContent":["/**\n * TransferModel.js\n */\n\ndefine([\n\t'app'\n],\nfunction(app) {\n\n\tvar TransferModel = app.Model.extend({\n\n    name: 'transfer',\n    displayName: 'amount_pretty',\n\n    urlRoot: function() {\n      return app.API() + 'transfers/';\n    },\n\n    schema: {\n      amount: {\n        type: 'transfer'\n      },\n      date: {\n        type: 'ISO'\n      }\n    },\n\n    validation: {\n      amount: app.utils.validateMoney\n    },\n\n    filters: [\n      'amount_pretty',\n      'amount_int',\n      'source_name',\n      'destination_name',\n      'dwolla_created',\n      'dwolla_destination_id',\n      'dwolla_id',\n      'dwolla_resource_id',\n      'dowlla_source_id'\n    ],\n\n    search_filters: [\n      '_id',\n\n      'bill_id',\n      'company_id',\n\n      'destination',\n      'destination_id',\n\n      'dwolla_created',\n      'dwolla_destination_id',\n      'dwolla_id',\n      'dwolla_resource_id',\n      'dwolla_source_id',\n\n      'source',\n      'source_id',\n\n      'created',\n      'updated'\n    ],\n\n    source_name: Backbone.computed('source', function() {\n      if (this.isNew()) return '';\n      var source = this.get('source');\n      if (!source) return;\n      return source.first_name + ' ' +  source.last_name;\n    }),\n\n    destination_name: Backbone.computed('destination', function() {\n      if (this.isNew()) return '';\n      var destination = this.get('destination');\n      if (!destination) return;\n      return destination.first_name + ' ' +  destination.last_name;\n    }),\n\n    amount_pretty: Backbone.computed('amount', function() {\n      var amount = this.get('amount');\n      if (this.isNew() || !amount) return '';\n\n      return app.utils.prettyMoney(amount);\n    }),\n\n    amount_int: Backbone.computed('amount', function() {\n      var amount = this.get('amount.value');\n      if (this.isNew() || !amount) return '';\n\n      return parseFloat(amount);\n    }),\n\n    // cancellable_until: Backbone.computed('created', function() {\n    //   var created = this.get('created');\n    //   if (!created) return;\n\n    //   var created_moment = moment.utc().utcOffset('-06:00');\n    //   var time_of_day = moment.utc(created_moment.format('HH:mm'), 'HH:mm');\n\n    //   var cancellable_until;\n\n    //   cancellable_until = moment.utc(created_moment.startOf('day').add('hours', 16));\n\n    //   // after 4pm?\n    //   if (time_of_day > moment.utc('16:00', 'HH:mm').utcOffset('-6:00')) {\n    //     cancellable_until = moment.utc(cancellable_until.add('days', 1)).utcOffset('-6:00');\n    //   }\n\n    //   return cancellable_until;\n    // }),\n\n    cancelTransfer: function() {\n      // var cancellable_until = this.get('cancellable_until');\n\n      // if (moment.utc() > moment.utc(cancellable_until)) \n        // throw new Error('This transfer is outside the cancellation window');\n\n      return app.utils.request({\n        path: 'dwolla/transfer/' + this.id + '/cancel',\n        method: 'POST'\n      });\n    }\n\n\t});\n\n\treturn TransferModel; \n\n});"]}