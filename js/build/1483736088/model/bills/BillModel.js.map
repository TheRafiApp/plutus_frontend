{"version":3,"sources":["model/bills/BillModel.js"],"names":["define","app","BillModel","Model","extend","name","displayName","filters","initialize","attributes","options","this","_","base","urlRoot","API","address","Backbone","computed","property","get","unit","number","city","state","date_pretty","due_date","moment","utc","format","charges_pretty","clone","$","charges","isEmpty","scheduled","map","charge","amount","utils","parseMoney","recurring","status","balance","startOf","today","isSame","message","date_output","is_future","lease","updated","days","Math","abs","duration","diff","asDays","has_autopay","each","autopay","tenant_id","session","user","id","target","type","tenants","length","first_name","last_name","transfers_by_user","transfers","output","tenant","_id","total","transfer","source","schema","validation","required","charges.scheduled","validateCharges"],"mappings":"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","file":"BillModel.js","sourcesContent":["/**\n * BillModel.js\n */\n\ndefine([\n\t'app'\n],\nfunction(app) {\n\n\tvar BillModel = app.Model.extend({\n    \n    name: 'bill',\n    displayName: 'date_pretty',\n    \n    filters: [\n      'address'\n    ],\n\n    initialize: function(attributes, options) {\n      if (!options) options = {};\n      if (!this.options) this.options = {};\n\n      this.options = _.extend(this.options, options);\n      if (!this.options.base) this.options.base = '';\n    },\n\n    urlRoot: function() {\n      return app.API() + this.options.base + 'bills/';\n    },\n\n    address: Backbone.computed('unit', 'property', function() {\n      var property = this.get('property');\n      var unit = this.get('unit');\n      if (typeof unit !== 'object') return;\n      // var data = this.toJSON();\n      return property.address + ' #' + unit.number + ', ' + property.city + ' ' + property.state;\n    }),\n\n    date_pretty: Backbone.computed('due_date', function() {\n      var due_date = this.get('due_date');\n      if (!due_date) return;\n      return moment.utc(due_date).format('MM/DD/YYYY');\n    }),\n\n    charges_pretty: Backbone.computed('charges', function() {\n      var clone = $.extend(true, {}, this.attributes);\n      var charges = clone.charges;\n      if (_.isEmpty(charges)) return;\n      if (charges.scheduled) {\n        charges.scheduled = charges.scheduled.map(function(charge) { \n          charge.amount = app.utils.parseMoney(charge.amount);\n          return charge;\n        });\n      }\n      if (charges.recurring) {\n        charges.recurring = charges.recurring.map(function(charge) { \n          charge.amount = app.utils.parseMoney(charge.amount);\n          return charge;\n        });  \n      }\n      \n      return charges;\n    }),\n\n    status: Backbone.computed('display_balance', 'due_date', function() {\n      var balance = this.get('display_balance');\n      var due_date = moment.utc(this.get('due_date')).startOf('day');\n      var today = moment.utc().startOf('day');\n      var state;\n\n      if (!due_date) return;\n\n      if (balance === 0) {\n        state = 'paid';\n      } else if (due_date < today) {\n        state = 'overdue';\n      } else if (due_date > today) {\n        state = 'created';\n      } else if (due_date.isSame(today)) {\n        state = 'due';\n      }\n\n      return state;\n    }),\n\n    message: Backbone.computed('lease', 'display_balance', 'due_date', 'updated', 'status', function() {\n      var status = this.get('status');\n      var balance = this.get('display_balance');\n      var lease = this.get('lease');\n\n      var due_date = moment.utc(this.get('due_date')).startOf('day');\n      var updated = moment.utc(this.get('updated')).startOf('day');\n      var today = moment.utc().startOf('day');\n      var days = Math.abs(moment.duration(due_date.diff(today)).asDays());\n      var message;\n      var date_output;\n      var is_future;\n\n      if (!due_date) return;\n      if (!lease) return;\n\n      var has_autopay = _.each(lease.autopay, function(tenant_id) {\n        return tenant_id === app.session.user.id;\n      });\n\n      if (balance === 0) {\n        message = 'Paid in full';\n        date_output = updated;\n      } else if (due_date < today) {\n        message = 'Overdue ' + days + ' days';\n        date_output = due_date;\n      } else if (due_date > today) {\n        message = 'Due in ' + days + ' days';\n        date_output = due_date;\n        is_future = true;\n      } else if (due_date.isSame(today)) {\n        message = 'Due today';\n        date_output = today;\n        is_future = true;\n      }\n\n      if (is_future && has_autopay) message = 'Autopay in ' + days + ' days';\n\n      return '<span class=\"status status-' + status + '\">' + message + '</span> ' + date_output.format('MM/DD/YYYY');\n    }),\n\n    target: Backbone.computed('type', 'property', 'unit', function() {\n      var type = this.get('type');\n      var target;\n\n      if (!type) return;\n\n      if (type === 'monthly') {\n        var property = this.get('property');\n        var unit = this.get('unit');\n        target = property.address + ' #' + unit.number;\n      } else if (type === 'anytime') {\n        var tenants = this.get('tenants');\n        if (tenants.length === 1) {\n          target = tenants[0].first_name + ' ' + tenants[0].last_name;\n        } else {\n          target = tenants.length + ' Roommates';\n        }\n      }\n      return target;\n    }),\n\n    transfers_by_user: Backbone.computed('transfers', 'tenants', function() { \n      var tenants = this.get('tenants');\n      var transfers = this.get('transfers');\n      if (!tenants) return;\n\n      var output = {};\n\n      tenants.map(function(tenant) {\n        var id = tenant._id;\n        var total = 0;\n        if (transfers) {\n          transfers.map(function(transfer) {\n            if (transfer.source == id && transfer.status !== 'failed') total += transfer.amount;\n          });\n        }\n        output[id] = total;\n      });\n\n      return output;\n    }),\n\n    schema: {\n      due_date: {\n        type: 'ISO'\n      },\n      charges: {\n        scheduled: [{\n          amount: {\n            type: 'charge'\n          },\n        }]\n      },\n      tenants: {\n        type: 'array'\n      }\n    },\n\n    validation: {\n      tenants: {\n        required: true\n      },\n\n      'charges.scheduled': app.utils.validateCharges\n    }\n\n\t});\n\n\treturn BillModel; \n\n});"]}