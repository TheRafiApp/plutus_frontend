{"version":3,"sources":["model/account/FundingSourceModel.js"],"names":["define","app","FundingSourceModel","Model","extend","idAttribute","name","displayName","urlRoot","API","defaults","type","validation","required","accountNumber","pattern","minLength","maxLength","routingNumber","length","is_primary","Backbone","computed","id","this","get","dwolla_account","session","user","primary_id","primary_funding_source","schema","amount1","value","amount2","fetchMicroDeposits","data","url","utils","request","path","method","sendMicroDeposits","requestMicroDeposits","setPrimary"],"mappings":"AAIAA,QACC,OAED,SAASC,GAER,GAAIC,GAAqBD,EAAIE,MAAMC,QAEhCC,YAAa,KAEbC,KAAM,iBACNC,YAAa,OAEbC,QAAS,WACP,MAAOP,GAAIQ,MAAQ,2BAGrBC,UACEJ,KAAM,KACNK,KAAM,QAGRC,YACEN,MACEO,UAAU,GAEZC,eACEC,QAAS,SACTC,UAAW,EACXC,UAAW,IAEbC,eACEH,QAAS,SACTI,OAAQ,IAIZC,WAAYC,SAASC,SAAS,KAAM,WAClC,GAAIC,GAAKC,KAAKC,IAAI,KAClB,IAAKF,EAAL,CAEA,GAAIG,GAAiBzB,EAAI0B,QAAQC,KAAKH,IAAI,kBACtCI,EAAaH,EAAeI,sBAEhC,OAAIP,KAAOM,GAAX,UAIFE,QACEC,SACEC,OACEtB,KAAM,UAGVuB,SACED,OACEtB,KAAM,WAKZwB,mBAAoB,SAASC,GAC3B,GAAIC,GAAMb,KAAKa,MAAQ,gBAEvB,OAAOpC,GAAIqC,MAAMC,SACfH,KAAMA,EACNI,KAAMH,EACNI,OAAQ,SAIZC,kBAAmB,SAASN,GAC1B,GAAIC,GAAMb,KAAKa,MAAQ,gBAEvB,OAAOpC,GAAIqC,MAAMC,SACfH,KAAMA,EACNI,KAAMH,EACNI,OAAQ,SAIZE,qBAAsB,SAASP,GAC7B,GAAIC,GAAMb,KAAKa,MAAQ,gBAEvB,OAAOpC,GAAIqC,MAAMC,SACfH,KAAMA,EACNI,KAAMH,EACNI,OAAQ,UAIZG,WAAY,WACV,GAAIR,IACFb,GAAIC,KAAKC,IAAI,MAIf,OAAOxB,GAAIqC,MAAMC,SACfH,KAAMA,EACNI,KAAM,0BACNC,OAAQ,UAKf,OAAOvC","file":"FundingSourceModel.js","sourcesContent":["/**\n * FundingSourceModel.js\n */\n\ndefine([\n\t'app'\n],\nfunction(app) {\n\n\tvar FundingSourceModel = app.Model.extend({\n\n    idAttribute: 'id',\n\n    name: 'funding source',\n    displayName: 'name',\n\n    urlRoot: function() {\n      return app.API() + 'account/funding_sources';\n    },\n\n    defaults: {\n      name: null,\n      type: 'bank'\n    },\n    \n    validation: {\n      name: {\n        required: true\n      },\n      accountNumber: {\n        pattern: 'number',\n        minLength: 8,\n        maxLength: 17\n      },\n      routingNumber: {\n        pattern: 'number',\n        length: 9\n      }\n    },\n\n    is_primary: Backbone.computed('id', function() {\n      var id = this.get('id');\n      if (!id) return;\n\n      var dwolla_account = app.session.user.get('dwolla_account');\n      var primary_id = dwolla_account.primary_funding_source;\n\n      if (id === primary_id) return true;\n    }),\n\n    // micro deposits\n    schema: {\n      amount1: {\n        value: {\n          type: 'money'\n        }\n      },\n      amount2: {\n        value: {\n          type: 'money'\n        }\n      }\n    },\n\n    fetchMicroDeposits: function(data) {\n      var url = this.url() + '/microdeposits';\n\n      return app.utils.request({\n        data: data,\n        path: url,\n        method: 'GET'\n      });\n    },\n\n    sendMicroDeposits: function(data) {\n      var url = this.url() + '/microdeposits';\n\n      return app.utils.request({\n        data: data,\n        path: url,\n        method: 'PUT'\n      });\n    },\n\n    requestMicroDeposits: function(data) {\n      var url = this.url() + '/microdeposits';\n\n      return app.utils.request({\n        data: data,\n        path: url,\n        method: 'POST'\n      });\n    },\n\n    setPrimary: function() {\n      var data = {\n        id: this.get('id'),\n        // name: this.get('name')\n      };\n\n      return app.utils.request({\n        data: data,\n        path: 'account/funding_sources',\n        method: 'PUT'\n      });\n    }\n\t});\n\n\treturn FundingSourceModel; \n\n});\n\n"]}