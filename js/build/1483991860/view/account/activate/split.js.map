{"version":3,"sources":["view/account/activate/split.js"],"names":["define","app","UserCardView","TenantModel","LeaseModel","OnboardingTemplate","Backbone","View","extend","className","template","_","events","click .action-next","change .split-amount","initialize","options","this","on","nextStep","render","user","parentView","toJSON","lease","step","suggested_split","rent","tenants","model","$el","html","logo","templates","total","utils","prettyMoney","split","renderChart","controls","maskMoney","getFundingSources","self","primary","get","path","session","request","method","then","response","find","funding_source","id","fail","err","console","warn","getSplitData","splitInput","clone","my_name","_id","map","tenant","existing_splits","filter","name","missing_splits","length","rent_covered","reduce","a","b","calculated_suggestion","parseFloat","is_user_set","hasOwnProperty","push","missing_rent","new_total","remaining","val","updateChart","split_data","keys","forEach","e","my_split","parseMoney","data","$","my_id","cards","log","sort","each","tenantModel","amount","negative","append","updatedSplit","updatedRemaining","handleClick","split_amount","is","promptConfirm","validateSplit","currentTarget","invalid","validateMoney","stopPropagation","fieldError","element","type","error","due_day","bill_due_day","message","getOrdinal","modalConfirm","autopay","schema","process","save","set","next","arguments"],"mappings":"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","file":"split.js","sourcesContent":["/**\n * account/onboarding/split.js\n */\n\ndefine([\n  'app',\n  // 'd3',\n  // 'c3',\n  'view/cards/user_payments',\n  'model/users/TenantModel',\n  'model/leases/MyLeaseModel',\n  'text!templates/account/activate/split.html',\n],\nfunction(app, UserCardView, TenantModel, LeaseModel, OnboardingTemplate) {\n\n  return Backbone.View.extend({\n\n    className: 'split',\n    template: _.template(OnboardingTemplate),\n\n    events: {\n      'click .action-next': 'handleClick',\n      'change .split-amount': 'validateSplit' \n    }, \n\n    initialize: function(options) {\n      if (options) _.extend(this, options);\n\n      this.on('confirmSplit', this.nextStep, this);\n      this.render();\n    },\n\n    render: function() {\n      var self = this;\n\n      this.user = this.parentView.user.toJSON();\n\n      var lease = this.step.lease;\n      var suggested_split = lease.rent / (lease.tenants.length);\n      \n      this.model = new LeaseModel(lease);\n\n      this.$el.html(this.template({\n        logo: app.templates.logo(),\n        total: app.utils.prettyMoney(lease.rent),\n        split: suggested_split\n      }));\n\n      this.renderChart();\n\n      app.controls.maskMoney('.money input', this, 7);\n\n      this.getFundingSources();\n\n      return this;\n    },\n\n    getFundingSources: function() {\n      var self = this;\n\n      var primary = this.parentView.user.get('dwolla.primary_funding_source');\n\n      var path = app.session.get('logged_in') ? 'account' : 'tenants/activate';\n      app.utils.request({\n        path: path + '/funding_sources',\n        method: 'GET'\n      }).then(function(response) {\n        self.primary = response.find(function(funding_source) {\n          return funding_source.id === primary;\n        });\n      }).fail(function(err) {\n        console.warn(err);\n      });\n    },\n\n    getSplitData: function(splitInput) {\n      var lease = this.model.clone().toJSON();\n      // var my_name = this.user.first_name + ' ' + this.user.last_name[0];\n      var my_name = this.user._id;\n      var split = lease.split || {};\n\n      // this endpoint doesn't include split on tenant...\n      lease.tenants = lease.tenants.map(function(tenant) {\n        if (split[tenant._id]) tenant.split = split[tenant._id];\n        return tenant;\n      });\n\n      // get tenants who have split set up\n      var existing_splits = lease.tenants.filter(function(tenant) {\n        return typeof tenant.split !== 'undefined';\n      }).map(function(tenant) {\n        return {\n          // name: tenant.first_name + ' ' + tenant.last_name[0],\n          name: tenant._id,\n          split: tenant.split\n        };\n      });\n\n      // get number of tenants without split\n      var missing_splits = lease.tenants.length - existing_splits.length;\n      // console.log('missing: ' + missing_splits)\n      \n      // tally up how much rent is account for\n      var rent_covered = existing_splits.map(function(tenant) {\n        return tenant.split;\n      }).reduce(function(a, b) {\n        return a + b;\n      }, 0);\n\n      var suggested_split;\n\n      var calculated_suggestion = missing_splits ? ((lease.rent - rent_covered) / missing_splits) : 0;\n      // if argument for split was passed, include that for current user \n      if (splitInput) {\n        suggested_split = parseFloat(splitInput);\n      } else {\n        suggested_split = calculated_suggestion;\n      }\n\n      // not sure if i really need to check for this\n      var is_user_set = lease.split && lease.split.hasOwnProperty(this.user._id);\n\n      if (!is_user_set) {\n        existing_splits.push({\n          name: my_name,\n          split: suggested_split\n        });\n      } else if (splitInput) {\n        existing_splits = existing_splits.map(function(split) {\n          if (split.name == my_name) split.split = suggested_split;\n          return split;\n        });\n      }\n\n      // tally up how much rent is account for\n      // var rent_covered = existing_splits.map(function(tenant) {\n      //   return tenant.split;\n      // }).reduce(function(a, b) {\n      //   return a + b;\n      // }, 0);\n\n      // how much rent is unaccounted for\n      var missing_rent = lease.rent - rent_covered;\n      if (missing_rent < 0) missing_rent = 0;\n\n      // console.log('already covered: ' + rent_covered, 'rent missing: ' + missing_rent)\n\n      // tally splits up with new user suggested split\n      var new_total = existing_splits.map(function(tenant) {\n        return tenant.split;\n      }).reduce(function(a, b) {\n        return a + b;\n      }, 0);\n\n      // using the new suggested split, what is left?\n      var remaining = lease.rent - new_total;\n\n      // check if this exceeds rent\n      if (remaining < 0) {\n        this.$el.find('.split-amount').val(missing_rent);\n        this.updateChart(missing_rent);\n        return false;\n      }\n\n      // console.log('new total: ' + new_total);\n      // console.log('suggested: ' + suggested_split + ' each')\n\n      // should i be checking for this?\n      if (missing_rent) {\n        existing_splits.push({\n          name: 'Remaining',\n          split: remaining\n        });\n      }\n\n      // console.log(existing_splits)\n\n      // format data for C3\n      var split_data = {};\n      var keys = [];\n\n      existing_splits.forEach(function(e) {\n        keys.push(e.name);\n        split_data[e.name] = e.split;\n      });\n\n      var my_split = split_data[my_name];\n\n      this.$el.find('.split-amount').val(app.utils.parseMoney(my_split));\n\n      return {\n        data: split_data,\n        keys: keys\n      };\n    },\n\n    renderChart: function(splitInput) {\n      var self = this;\n      var tenants = $.extend(true, [], this.model.get('tenants'));\n      var my_id = this.user._id;\n\n      this.cards = {};\n\n      var split_data = this.getSplitData(splitInput);\n\n      console.log(split_data)\n\n      // put self first in array\n      tenants = tenants.sort(function(a, b) {\n        if (a.split) {\n          return -1;\n        } else {\n          return 1;\n        }\n      }).sort(function(a, b) {\n        if (a._id === my_id) {\n          return -1;\n        } else if (b._id === my_id) {\n          return 1;\n        }\n      });\n\n      // add new split data to array\n      tenants = tenants.map(function(tenant) {\n        tenant.split = split_data.data[tenant._id];\n        return tenant;\n      });\n\n      // var split = this.model.get('split');\n\n      _.each(tenants, function(tenant) {\n        var tenantModel = new TenantModel(tenant);\n        self.cards[tenantModel.id] = new UserCardView({ \n          data: tenantModel.toJSON(),\n          amount: tenantModel.toJSON().split,\n          negative: true\n        });\n\n        self.$el.find('.chart').append(self.cards[tenantModel.id].$el);\n      });\n\n      var remaining = split_data.data['Remaining'] ? app.utils.prettyMoney(split_data.data['Remaining']) : '$0.00';\n      this.$el.find('.remaining').html(remaining);\n\n      this.getSplitData();\n    },\n\n    updateChart: function(splitInput) {\n      var split_data = this.getSplitData(splitInput);\n\n      var id = this.user._id;\n\n      if (!split_data) return;\n\n      var updatedSplit = app.utils.prettyMoney(split_data.data[id]);\n      var updatedRemaining = app.utils.prettyMoney(split_data.data['Remaining'] || 0);\n\n      this.$el.find('.remaining').html(updatedRemaining);\n      this.cards[id].$el.find('.transfer-data li').html('-' + updatedSplit);\n    },\n\n    handleClick: function() {\n      var split_amount = this.$el.find('.split-amount').val();\n      var split_data = this.getSplitData(split_amount);\n\n      if (!split_data) return;\n\n      this.updateChart(split_amount);\n\n      if (this.$el.find('#autopay').is(':checked')) {\n        this.promptConfirm(split_amount);\n      } else {\n        this.nextStep();\n      }\n    },\n\n    validateSplit: function(e) {\n      var amount = $(e.currentTarget).val();\n      var invalid = app.utils.validateMoney(amount);\n      \n      if (invalid) {\n        e.stopPropagation();\n        app.controls.fieldError({\n          element: $(e.currentTarget),\n          type: 'error',\n          error: invalid\n        });\n      } else {\n        this.updateChart(amount);\n      }\n    },\n\n    promptConfirm: function(split) {\n      var due_day = this.step.lease.bill_due_day;\n      var message = 'You have opted to autopay your rent amount of ';\n      message += app.utils.prettyMoney(split);\n      message += ', from your account \"';\n      message += this.primary.name;\n      message += '\" to ';\n      message += this.parentView.user.get('company.name');\n      message += '. Per your lease, you will be charged this amount on the ';\n      message += due_day + app.utils.getOrdinal(due_day);\n      message += ' of each month.';\n\n      app.controls.modalConfirm(message, 'confirmSplit', this);\n    },\n\n    nextStep: function() {\n      var self = this;\n      var split_data = {\n        split: this.$el.find('.split-amount').val(),\n        autopay: this.$el.find('#autopay').is(':checked')\n      };\n      \n      var data = app.schema.process(split_data, this.model);\n\n      this.model.save(data).then(function(response) {\n        self.parentView.user.set(response);\n        self.parentView.next();\n      }).fail(function() {\n        console.warn(arguments);\n      });\n    }\n\n    // renderChart: function(splitInput) {\n    //   var lease = this.step.lease;\n\n    //   var self = this;\n    //   var $chart = this.$el.find('.chart');\n\n    //   var split_data = this.getSplitData(splitInput);\n\n    //   if (!split_data) return;\n\n    //   var myName = this.user.first_name + ' ' + this.user.last_name;\n\n    //   this.chart = c3.generate({\n    //     bindto: $chart[0],\n    //     data: {\n    //       json: [split_data.data],\n    //       keys: {\n    //         value: split_data.keys\n    //       },\n    //       type : 'pie',\n    //       order: null,\n    //       color: function (color, d) {\n    //         if (d === 'Remaining') return self.step.options.background;\n    //         if (d === myName) return 'rgba(255,255,255, 0.6)';\n    //         return '#fff';\n    //       }\n    //     },\n    //     legend: {\n    //        show: false\n    //     },\n    //     pie: {\n    //       label: {\n    //         format: function(value, ratio, id) {\n    //           return id + ': ' + app.utils.prettyMoney(value);\n    //         }\n    //       },\n    //     }\n    //   });\n\n    //   // hack to fix invisible chart onload\n    //   setTimeout(function() {\n    //     self.chart.flush();\n    //   }, 10);\n\n    //   var $total = $('<div class=\"total\" />');\n    //   var $amount = $('<div class=\"amount\" />').html(app.utils.prettyMoney(lease.rent));\n\n    //   this.$el.find('.chart').append($total.append($amount));\n    // },\n    // \n    // updateChart: function(split_amount) {\n    //   var split_data = this.getSplitData(split_amount);\n    //   if (!split_data) return;\n\n    //   this.chart.load({\n    //     json: [split_data.data],\n    //     keys: {\n    //       value: split_data.keys\n    //     }\n    //   });\n    // },\n\n  });\n});"]}