{"version":3,"sources":["view/FundingSourceView.js"],"names":["define","app","FundingSourceTemplate","Backbone","View","extend","className","template","_","events","click .action-delete","click .action-send-md","click .action-request-md","click .action-make-primary","initialize","options","this","on","deleteModel","confirmPrimary","render","data","model","toJSON","primary","microdeposits","session","user","get","fs","id","$el","html","funding_source","$microdeposits","find","mask","reverse","translation","a","pattern","fallback","z","$","val","promptDelete","message","target","parentView","collection","length","controls","modalConfirm","self","loadLock","destroy","then","fadeOut","close","fail","console","log","arguments","alerts","error","sendMicro","formData","inputs","serializeArray","each","input","parseFloat","toFixed","schema","process","sendMicroDeposits","always","success","warn","requestMicro","requestMicroDeposits","makePrimary","setPrimary","handleError"],"mappings":"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","file":"FundingSourceView.js","sourcesContent":["/**\n * FundingSourceView.js\n */\n\ndefine([\n  'app',\n  'text!templates/funding_sources/funding_source.html',\n],\nfunction(app, FundingSourceTemplate) {\n\n  return Backbone.View.extend({\n\n    className: 'funding-source-view',\n\n    template: _.template(FundingSourceTemplate),\n\n    events: {\n      'click .action-delete': 'promptDelete',\n      'click .action-send-md': 'sendMicro',\n      'click .action-request-md': 'requestMicro',\n      'click .action-make-primary': 'makePrimary'\n    },\n\n    initialize: function(options) {\n      _.extend(this, options);\n\n      this.on('confirmDelete', this.deleteModel, this);\n      this.on('confirmPrimary', this.confirmPrimary, this);\n\n      this.render();\n    },\n\n    render: function() {\n      var data = this.model.toJSON();\n\n      // is this funding source primary?\n      data.primary = this.primary;\n\n      // append microdeposit data\n      \n      var microdeposits = app.session.user.get('dwolla_account.microdeposits');\n\n      for (var fs in microdeposits) {\n        if (data.id === fs) {\n          data.microdeposits = microdeposits[fs];\n        }\n      }\n\n      this.$el.html(this.template({ \n        funding_source: data \n      }));\n\n      var $microdeposits = this.$el.find('.numbers-only');\n\n      $microdeposits.mask('zz', {\n        reverse: true,\n        translation: {\n          'a': {\n            pattern: /[0]/,\n            fallback: '0'\n          },\n          'z': {\n            pattern: /[0-9]/\n          }\n        }\n      });\n\n      // force cursor to end on click or tabfocus\n      $microdeposits.on('click focus', function() {\n        $(this).val($(this).val());\n      });\n      \n      return this.$el;\n    },\n\n    promptDelete: function() {\n\n      var message = '';\n      var target = this.model.get('name');\n\n      if (this.primary) message += 'You are about to delete your primary funding source. ';\n\n      if (this.parentView.collection.length === 1) {\n        message += 'This is your only funding source. ';\n      }\n\n      message += 'Are you sure you want to delete ' + target + '?';\n\n      app.controls.modalConfirm(message, 'confirmDelete', this);\n    },\n\n    deleteModel: function() {\n      var self = this;\n\n      app.controls.loadLock(true);\n\n      this.model.destroy().then(function() {\n        app.controls.loadLock(false);\n\n        self.$el.fadeOut(function() {\n          self.close();\n        });\n      }).fail(function() {\n        console.log(arguments);\n        app.alerts.error('Couldn\\'t delete the funding source');\n      });\n    },\n\n    sendMicro: function() {\n      var self = this;\n\n      var formData = {}, inputs = this.$el.find('form.micro-deposits').serializeArray();\n\n      _.each(inputs, function(input) {\n        formData[input['name']] = {};\n        formData[input['name']]['value'] = parseFloat(('0.' + input['value'])).toFixed(2);\n        formData[input['name']]['currency'] = 'USD';\n      });\n\n      formData = app.schema.process(formData, this.model);\n\n      app.controls.loadLock(true);\n      \n\n      this.model.sendMicroDeposits(formData).always(function() {\n        app.controls.loadLock(false);\n      }).then(function() {\n        self.parentView.parentView.initialize();\n        app.alerts.success('Thanks for verifying your bank account!');\n      }).fail(function() {\n        console.warn(arguments);\n        app.alerts.error('Mico Deposits could not be verified.');\n      });\n    },\n\n    requestMicro: function() {\n      var self = this;\n\n      var formData = {};\n\n      app.controls.loadLock(true);\n\n      this.model.requestMicroDeposits(formData).always(function() {\n        app.controls.loadLock(false);\n      }).then(function() {\n        self.parentView.parentView.initialize();\n      }, function() {\n        console.warn(arguments);\n        app.alerts.error('Mico Deposits could not be initiated.');\n      });\n    },\n\n    makePrimary: function() {\n      var target = this.model.get('name');\n      var message = 'Are you sure you want to use ' + target + ' as your primary bank account?';\n\n      app.controls.modalConfirm(message, 'confirmPrimary', this);\n    },\n\n    confirmPrimary: function() {\n      var self = this;\n\n      this.model.setPrimary().then(function() {\n        self.parentView.parentView.initialize();\n        app.alerts.success('Your primary bank account has been updated!');\n      }).fail(function(error) {\n        app.controls.handleError(error);\n      });\n\n    }\n\n  });\n});"]}