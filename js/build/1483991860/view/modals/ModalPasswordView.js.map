{"version":3,"sources":["view/modals/ModalPasswordView.js"],"names":["define","app","ModalView","ModalPasswordTemplate","extend","title","events","click .action-confirm","messages","success","error","template","_","initialize","_options","this","data","context","model","toJSON","AccountModel","models","action","renderModalView","render","ready","controls","renderPasswordFields","validatePassword","e","pw","$el","find","pc","errors","val","fieldError","element","Backbone","Validation","patterns","password","test","confirm","constructData","current_password"],"mappings":"AAIAA,QACE,MACA,wBACA,6CAEF,SACEC,EACAC,EACAC,GAGA,MAAOD,GAAUE,QAEfC,MAAS,kBAETC,QACEC,wBAAyB,oBAG3BC,UACEC,QAAS,iCACTC,MAAO,sCAGTC,SAAUC,EAAED,SAASR,GAErBU,WAAY,SAASC,GACfA,GAAUF,EAAER,OAAOW,KAAMD,EAE7B,IAAIE,GAAOD,KAAKE,QAAQC,MAAMC,SAE1BC,EAAenB,EAAIoB,OAAOD,YAC9BL,MAAKG,MAAQ,GAAIE,GAAaJ,GAC5BM,OAAQ,aAGVP,KAAKQ,mBAGPC,OAAQ,WAON,MAJAT,MAAKU,QAELxB,EAAIyB,SAASC,qBAAqBZ,MAE3BA,MAGTa,iBAAkB,SAASC,GACzB,GAAIC,GAAKf,KAAKgB,IAAIC,KAAK,aACnBC,EAAKlB,KAAKgB,IAAIC,KAAK,qBAEnBE,GAAS,CAUb,OARKJ,GAAGK,QACNlC,EAAIyB,SAASU,YACXC,QAASP,EACTpB,MAAO,yBAETwB,GAAS,IAGPA,IAECI,SAASC,WAAWC,SAASC,SAASC,KAAKZ,EAAGK,SACjDlC,EAAIyB,SAASU,YACXC,QAASP,EACTpB,MAAO4B,SAASC,WAAW/B,SAASiC,WAEtCP,GAAS,GAGPD,EAAGE,QAAUL,EAAGK,QAClBlC,EAAIyB,SAASU,YACXC,QAASJ,EACTvB,MAAO,yBAETwB,GAAS,GAGND,EAAGE,QACNlC,EAAIyB,SAASU,YACXC,QAASJ,EACTvB,MAAO,iCAETwB,GAAS,IAGPA,OAGFnB,MAAK4B,QAAQd,KAIjBe,cAAe,WACb,GAAI5B,IACF6B,iBAAkB9B,KAAKgB,IAAIC,KAAK,YAAYG,MAC5CM,SAAU1B,KAAKgB,IAAIC,KAAK,aAAaG,MAGvC,OAAOnB","file":"ModalPasswordView.js","sourcesContent":["/**\n * ModalPasswordView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'text!templates/modals/modal-password.html'\n],\nfunction(\n  app, \n  ModalView,\n  ModalPasswordTemplate\n) {\n\n  return ModalView.extend({\n\n    'title': 'Change Password',\n\n    'events': {\n      'click .action-confirm': 'validatePassword',\n    },\n\n    messages: {\n      success: 'Your password has been updated',\n      error: 'Your password could not be updated'\n    },\n\n    template: _.template(ModalPasswordTemplate),\n    \n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var data = this.context.model.toJSON();\n      \n      var AccountModel = app.models.AccountModel;\n      this.model = new AccountModel(data, {\n        action: 'password'\n      });\n\n      this.renderModalView();\n    },\n\n    render: function() {\n      var self = this; \n\n      this.ready();\n\n      app.controls.renderPasswordFields(this);\n\n      return this;\n    },\n\n    validatePassword: function(e) {\n      var pw = this.$el.find('.password');\n      var pc = this.$el.find('.password-confirm');\n\n      var errors = false;\n\n      if (!pw.val()) {\n        app.controls.fieldError({\n          element: pw,\n          error: 'Password is required'\n        });\n        errors = true;\n      }\n\n      if (errors) return false;\n\n      if (!Backbone.Validation.patterns.password.test(pw.val())) {\n        app.controls.fieldError({\n          element: pw,\n          error: Backbone.Validation.messages.password\n        });\n        errors = true;\n      }\n      \n      if (pc.val() !== pw.val()) {\n        app.controls.fieldError({\n          element: pc,\n          error: 'Passwords must match'\n        });\n        errors = true;\n      }\n\n      if (!pc.val()) {\n        app.controls.fieldError({\n          element: pc,\n          error: 'Please confirm your password'\n        });\n        errors = true;\n      }\n\n      if (errors) {\n        return false;\n      } else {\n        this.confirm(e);\n      }\n    },\n\n    constructData: function() {\n      var data = {\n        current_password: this.$el.find('.current').val(),\n        password: this.$el.find('.password').val()\n      };\n\n      return data;\n    }\n    \n  });\n});"]}