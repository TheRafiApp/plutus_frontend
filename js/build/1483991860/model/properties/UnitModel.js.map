{"version":3,"sources":["model/properties/UnitModel.js"],"names":["define","app","UnitModel","Model","extend","name","displayName","urlRoot","API","this","options","parentModelId","schema","rent","type","filters","number_pretty","Backbone","computed","number","get","test","rent_pretty","utils","prettyMoney","sq_ft_int","sq_ft","parseFloat","full_address","property","country","address","city","stateAbbr","state","zip","validation","required","beds","input","field","attributes","check","isNaN","baths","atributes","validateMoney"],"mappings":"AAIAA,QACE,OAEF,SAASC,GAEP,GAAIC,GAAYD,EAAIE,MAAMC,QAExBC,KAAM,OACNC,YAAa,gBAEbC,QAAS,WACP,MAAON,GAAIO,MAAQ,cAAgBC,KAAKC,QAAQC,cAAgB,UAGlEC,QACEC,MACEC,KAAM,UAIVC,SACE,eACA,YACA,cACA,iBAGFC,cAAeC,SAASC,SAAS,SAAU,WACzC,GAAIC,GAASV,KAAKW,IAAI,SACtB,IAAKD,EAEL,MADI,QAAQE,KAAKF,KAASA,EAAS,IAAMA,GAClCA,IAGTG,YAAaL,SAASC,SAAS,OAAQ,WACrC,GAAIL,GAAOJ,KAAKW,IAAI,OACpB,IAAKP,EAEL,MAAOZ,GAAIsB,MAAMC,YAAYX,KAG/BY,UAAWR,SAASC,SAAS,QAAS,WACpC,GAAIQ,GAAQjB,KAAKW,IAAI,QACrB,IAAKM,EAEL,MAAOC,YAAWD,KAGpBE,aAAcX,SAASC,SAAS,gBAAiB,WAAY,WAC3D,GAAIW,GAAWpB,KAAKW,IAAI,WACxB,IAAKS,GACmB,gBAAbA,GAAX,CAGA,GAAIC,GAAUD,EAASC,QAAU,KAAOD,EAASC,QAAU,EAE3D,OAAOD,GAASE,QAAU,KAAOtB,KAAKW,IAAI,iBAAmB,KAAOS,EAASG,KAAO,KAAO/B,EAAIsB,MAAMU,UAAUJ,EAASK,OAAS,IAAML,EAASM,IAAML,KAGxJM,YACEjB,QACEkB,UAAU,GAEZR,UACEQ,UAAU,GAEZC,KAAM,SAASC,EAAOC,EAAOC,GAC3B,GAAIC,GAAQH,EAAQ,CACpB,IAAII,MAAMD,IAAUA,IAAUA,EAAO,MAAO,+BAE9CE,MAAO,SAASL,EAAOC,EAAOC,GAC5B,GAAIC,GAAQH,EAAQ,CACpB,IAAII,MAAMD,IAAUA,IAAUA,EAAO,MAAO,+BAE9C7B,KAAM,SAAS0B,EAAOC,EAAOK,GAE3B,GAAqB,mBAAVN,GACX,MAAOtC,GAAIsB,MAAMuB,cAAcP,MAMrC,OAAOrC","file":"UnitModel.js","sourcesContent":["/**\n * UnitModel.js\n */\n\ndefine([\n  'app'\n],\nfunction(app) {\n\n  var UnitModel = app.Model.extend({\n\n    name: 'unit',\n    displayName: 'number_pretty',\n\n    urlRoot: function() {\n      return app.API() + 'properties/' + this.options.parentModelId + '/units';\n    },\n\n    schema: {\n      rent: {\n        type: 'money'\n      }\n    },\n\n    filters: [\n      'full_address',\n      'sq_ft_int',\n      'rent_pretty',\n      'number_pretty'\n    ],\n\n    number_pretty: Backbone.computed('number', function() {\n      var number = this.get('number');\n      if (!number) return;\n      if (/^[\\d]/.test(number)) number = '#' + number;\n      return number;\n    }),\n\n    rent_pretty: Backbone.computed('rent', function() {\n      var rent = this.get('rent');\n      if (!rent) return;\n      \n      return app.utils.prettyMoney(rent);\n    }),\n\n    sq_ft_int: Backbone.computed('sq_ft', function() {\n      var sq_ft = this.get('sq_ft');\n      if (!sq_ft) return;\n      \n      return parseFloat(sq_ft);\n    }),\n\n    full_address: Backbone.computed('number_pretty', 'property', function() {\n      var property = this.get('property');\n      if (!property) return;\n      if (typeof property === 'string') return;\n      // console.log(property)\n\n      var country = property.country ? ', ' + property.country : '';\n\n      return property.address + ' #' + this.get('number_pretty') + ', ' + property.city + ', ' + app.utils.stateAbbr(property.state) + ' ' + property.zip + country;\n    }),\n\n    validation: {\n      number: {\n        required: true\n      },\n      property: {\n        required: true\n      },\n      beds: function(input, field, attributes) {\n        var check = input % 1;\n        if (isNaN(check) || check !== check) return 'Please enter a valid number';\n      },\n      baths: function(input, field, attributes) {\n        var check = input % 1;\n        if (isNaN(check) || check !== check) return 'Please enter a valid number';\n      },\n      rent: function(input, field, atributes) {\n        // this field is optional, but if it is specified, it should validate\n        if (typeof input === 'undefined') return;\n        return app.utils.validateMoney(input);\n      }\n    }\n\n  });\n\n  return UnitModel; \n\n});"]}