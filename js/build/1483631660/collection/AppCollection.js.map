{"version":3,"sources":["collection/AppCollection.js"],"names":["define","app","AppCollection","Backbone","Collection","extend","idAttribute","sort_key","initialize","models","options","this","_","comparator","item","get","sortByField","fieldName","reverse","sort","search","query","cache","constructor","Array","forEach","tag","i","toLowerCase","String","filtered","filter","model","cache_clone","check","attrs","omit","attributes","search_filters","attr","indexOf","every","values","v","filters","field","length","dates","toString","field2","min","moment","max","model_date","utc","some"],"mappings":"AAIAA,QACE,OAEF,SAASC,GAEP,GAAIC,GAAgBC,SAASC,WAAWC,QAEtCC,YAAa,MAEbC,SAAU,MAEVC,WAAY,SAASC,EAAQC,GAM3B,MALKA,KAASA,MACTC,KAAKD,UAASC,KAAKD,YAExBC,KAAKD,QAAUE,EAAEP,OAAOM,KAAKD,QAASA,GAE/BC,MAGTE,WAAY,SAASC,GACnB,MAAOA,GAAKC,IAAIJ,KAAKJ,WAGvBS,YAAa,SAASC,EAAWC,GAC/BP,KAAKJ,SAAWU,EAChBN,KAAKQ,QAGPC,OAAQ,SAASC,GAEf,GAAIC,EAEAD,GAAME,cAAgBC,OACxBF,KACAD,EAAMI,QAAQ,SAASC,EAAKC,GAC1BL,EAAMI,EAAIE,eAAiB,KAEpBP,EAAME,cAAgBM,SAC/BR,EAAQA,EAAMO,cAGhB,IAAIE,GAAWnB,KAAKoB,OAAO,SAASC,GAClC,GAGIC,GAHAC,GAAQ,EACRC,EAAQvB,EAAEwB,KAAKJ,EAAMK,WAAYL,EAAMM,eAGvChB,KAAOW,EAAcrB,EAAEP,UAAWiB,GAEtC,KAAK,GAAIiB,KAAQJ,GACf,GAA0B,gBAAfA,GAAMI,GACf,GAAIN,EAEF,IAAK,GAAIP,KAAOO,IACT,GAAKE,EAAMI,IAAOX,cAAcY,QAAQd,IAAO,GAClDO,EAAYP,SAGS,gBAATL,KACX,GAAKc,EAAMI,IAAOX,cAAcY,QAAQnB,IAAS,IACpDa,GAAQ,EAMhB,OAAID,GAEKrB,EAAE6B,MAAM7B,EAAE8B,OAAOT,GAAc,SAASU,GAC7C,MAAOA,GAAI,IAGNT,GAGX,OAAO,IAAIhC,GAAc4B,IAG3Bc,QAAS,SAASA,GAChB,GAAId,GAAWnB,KAAKoB,OAAO,SAASC,GAGlC,GAGIV,IAHQV,EAAEwB,KAAKJ,EAAMK,WAAYL,EAAMM,oBAG3BJ,IAGhB,KAAK,GAAIW,KAASD,GACc,IAA1BA,EAAQC,GAAOC,SACnBxB,EAAMuB,MACNX,EAAMW,IAAS,EAGXD,EAAQC,GAAOE,MAEjBzB,EAAMuB,GAAOE,MAAQf,EAAMjB,IAAI8B,GAK/BD,EAAQC,GAAOpB,QAAQ,SAASC,GAC9BJ,EAAMuB,GAAOnB,GAAO,CACpB,IAAIa,GAAOP,EAAMjB,IAAI8B,EAKjBD,GAAQC,GAAOL,QAAQD,EAAKS,aAAc,GAAI1B,EAAMuB,GAAOnB,OAKrE,KAAK,GAAIuB,KAAU3B,GAGjB,GAA6B,gBAAlBA,GAAM2B,IAAwB3B,EAAM2B,GAAQF,MAAO,CAE5D,GAAIG,GAAMC,OAAOP,EAAQK,GAAQF,MAAM,IACnCK,EAAMD,OAAOP,EAAQK,GAAQF,MAAM,GAGvCb,GAAMe,GAAUrC,EAAE6B,MAAMnB,EAAM2B,GAAS,SAASN,GAC9C,GAAIU,GAAaF,OAAOG,IAAIX,EAC5B,OAAOO,IAAOG,GAAcA,GAAcD,QAK5ClB,GAAMe,GAAUrC,EAAE2C,KAAK3C,EAAE8B,OAAOpB,EAAM2B,IAAU,SAASN,GACvD,MAAOA,GAAI,GAKjB,OAAO/B,GAAE6B,MAAM7B,EAAE8B,OAAOR,GAAQ,SAASS,GACvC,MAAOA,MAAM,KAIjB,OAAO,IAAIzC,GAAc4B,KAI7B,OAAO5B","file":"AppCollection.js","sourcesContent":["/**\n * AppCollection.js\n */\n\ndefine([\n  'app'\n],\nfunction(app) {\n\n  var AppCollection = Backbone.Collection.extend({\n\n    idAttribute: '_id',\n\n    sort_key: '_id',\n\n    initialize: function(models, options) {\n      if (!options) options = {};\n      if (!this.options) this.options = {};\n\n      this.options = _.extend(this.options, options); \n\n      return this;\n    },\n\n    comparator: function(item) {\n      return item.get(this.sort_key);\n    },\n    \n    sortByField: function(fieldName, reverse) {\n      this.sort_key = fieldName;\n      this.sort();\n    },\n\n    search: function(query) {\n\n      var cache;\n\n      if (query.constructor === Array) {\n        cache = {};\n        query.forEach(function(tag, i) {\n          cache[tag.toLowerCase()] = 0;\n        });\n      } else if (query.constructor === String) {\n        query = query.toLowerCase();\n      }\n\n      var filtered = this.filter(function(model) {\n        var check = false;\n        var attrs = _.omit(model.attributes, model.search_filters);\n        \n        var cache_clone;\n        if (cache) cache_clone = _.extend({}, cache);\n\n        for (var attr in attrs) {\n          if (typeof attrs[attr] == 'string') {\n            if (cache_clone) {\n              // all tags in query must match at least once\n              for (var tag in cache_clone) {\n                if (('' + attrs[attr]).toLowerCase().indexOf(tag) > -1) {\n                  cache_clone[tag]++;\n                }\n              }\n            } else if (typeof query == 'string') {\n              if (('' + attrs[attr]).toLowerCase().indexOf(query) > -1) {\n                check = true;\n              }\n            }\n          }\n        }\n\n        if (cache_clone) {\n          // NOTE: this could be used to rank best matches\n          return _.every(_.values(cache_clone), function(v) {\n            return v > 0;\n          });\n        } else {\n          return check;\n        }\n      });\n      return new AppCollection(filtered);\n    },\n\n    filters: function(filters) {\n      var filtered = this.filter(function(model) {\n\n        // remove attributes that should not be searchable\n        var attrs = _.omit(model.attributes, model.search_filters);\n\n        // empty objects for dependent matching\n        var cache = {}, check = {};\n\n        // build cache object to test each attribute\n        for (var field in filters) {\n          if (filters[field].length === 0) continue;\n          cache[field] = {};\n          check[field] = false;\n\n          // date range\n          if (filters[field].dates) {\n            // cache[field].dates = filters[field].dates;\n            cache[field].dates = model.get(field);\n\n          // normal filters\n          } else {\n            // set each attr cache to 0, increment for each fuzzy match\n            filters[field].forEach(function(tag) {\n              cache[field][tag] = 0;\n              var attr = model.get(field);\n\n              // if there is a match, increment the cache value\n              // ex. cache.first_name.nick === 1\n              \n              if (filters[field].indexOf(attr.toString()) > -1) cache[field][tag]++;\n            });\n          }\n        }\n\n        for (var field2 in cache) {\n\n          // if type is date_range\n          if (typeof cache[field2] === 'object' && cache[field2].dates) {\n\n            var min = moment(filters[field2].dates[0]);\n            var max = moment(filters[field2].dates[1]);\n\n            // check if each field is true for models\n            check[field2] = _.every(cache[field2], function(v) {\n              var model_date = moment.utc(v);\n              return min <= model_date && model_date <= max;\n            });\n\n          // or is normal filter\n          } else {\n            check[field2] = _.some(_.values(cache[field2]), function(v) {\n              return v > 0;\n            });\n          }\n        }\n\n        return _.every(_.values(check), function(v) {\n          return v === true;\n        });\n      });\n\n      return new AppCollection(filtered);\n    }\n  });\n\n  return AppCollection;\n\n});"]}