{"version":3,"sources":["model/properties/PropertyModel.js"],"names":["define","app","PropertyModel","Model","extend","name","displayName","urlRoot","API","filters","full_address","Backbone","computed","this","isNew","address","get","_","escape","vacancies","vacancy_losses","units","forEach","unit","active_leases","leases","lease","start_date","moment","end_date","date","parseInt","rent","vacant_units","number_of_units","length","validation","required","city","state","zip","pattern"],"mappings":"AAIAA,QACE,OAEF,SAASC,GAEP,GAAIC,GAAgBD,EAAIE,MAAMC,QAE5BC,KAAM,WACNC,YAAa,eAEbC,QAAS,WACP,MAAON,GAAIO,MAAQ,eAGrBC,SACE,eACA,YACA,mBAGFC,aAAcC,SAASC,SAAS,UAAW,OAAQ,QAAS,MAAO,UAAW,WAC5E,GAAIC,KAAKC,QAAS,MAAO,EACzB,IAAIC,GAAUF,KAAKG,IAAI,WAAa,IAKpC,OAJAD,IAAWF,KAAKG,IAAI,QAAW,KAC/BD,GAAWF,KAAKG,IAAI,SAAW,IAC/BD,GAAWF,KAAKG,IAAI,OAAS,KAC7BD,GAAWF,KAAKG,IAAI,WACbC,EAAEC,OAAOH,KAGlBI,UAAWR,SAASC,SAAS,QAAS,WACpC,GAAIC,KAAKC,QAAS,MAAO,EACzB,IAAIK,GAAY,EACZC,EAAiB,EACjBC,EAAQR,KAAKG,IAAI,QACrB,OAAKK,IAELA,EAAMC,QAAQ,SAASC,GACrB,GAAIC,GAAgB,CAEfD,GAAKE,SAEVF,EAAKE,OAAOH,QAAQ,SAASI,GAC3B,GAAIC,GAAaC,OAAOF,EAAMC,YAC1BE,EAAWD,OAAOF,EAAMG,UAGxBC,EAAOF,QAEPD,GAAaG,EAAOD,GAAUL,MAGd,IAAlBA,IACFL,IACAC,GAAkCW,SAASR,EAAKS,WAKlDC,aAAcd,EACdC,eAAgBA,IAzBC,KA6BrBc,gBAAiBvB,SAASC,SAAS,QAAS,WAC1C,GAAIC,KAAKC,QAAS,MAAO,EACzB,IACIO,GAAQR,KAAKG,IAAI,QACrB,OAAKK,GACEA,EAAMc,OADM,KAIrBC,YACErB,SACEsB,UAAU,GAEZC,MACED,UAAU,GAEZE,OACEF,UAAU,GAEZG,KACEH,UAAU,EACVI,QAAS,SAMf,OAAOvC","file":"PropertyModel.js","sourcesContent":["/**\n * PropertyModel.js\n */\n\ndefine([\n  'app'\n],\nfunction(app) {\n\n  var PropertyModel = app.Model.extend({\n\n    name: 'property',\n    displayName: 'full_address',\n\n    urlRoot: function() {\n      return app.API() + 'properties/';\n    },\n\n    filters: [\n      'full_address',\n      'vacancies',\n      'pay_into_target'\n    ],\n\n    full_address: Backbone.computed('address', 'city', 'state', 'zip', 'country', function() {\n      if (this.isNew()) return '';\n      var address = this.get('address') + ', ';\n      address += this.get('city')  + ', ';\n      address += this.get('state') + ' ';\n      address += this.get('zip') + ', ';\n      address += this.get('country');\n      return _.escape(address);\n    }),\n\n    vacancies: Backbone.computed('units', function() {\n      if (this.isNew()) return '';\n      var vacancies = 0;\n      var vacancy_losses = 0;\n      var units = this.get('units');\n      if (!units) return '';\n\n      units.forEach(function(unit) {\n        var active_leases = 0;\n\n        if (!unit.leases) return;\n\n        unit.leases.forEach(function(lease) {\n          var start_date = moment(lease.start_date);\n          var end_date = moment(lease.end_date);\n\n          // this has to be switched out for a customizable date\n          var date = moment();\n\n          if (start_date < date < end_date) active_leases++;\n        });\n\n        if (active_leases === 0) {\n          vacancies++;\n          vacancy_losses = vacancy_losses + parseInt(unit.rent);\n        }\n      });\n\n      return {\n        vacant_units: vacancies,\n        vacancy_losses: vacancy_losses\n      };\n    }),\n\n    number_of_units: Backbone.computed('units', function() {\n      if (this.isNew()) return '';\n      var number_of_units = 0;\n      var units = this.get('units');\n      if (!units) return '';\n      return units.length;\n    }),\n\n    validation: {\n      address: {\n        required: true\n      },\n      city: {\n        required: true\n      },\n      state: {\n        required: true\n      },\n      zip: {\n        required: true,\n        pattern: 'zip'\n      }\n    }\n\n  });\n\n  return PropertyModel; \n\n});"]}