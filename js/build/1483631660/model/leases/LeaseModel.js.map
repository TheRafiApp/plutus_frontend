{"version":3,"sources":["model/leases/LeaseModel.js"],"names":["define","app","LeaseModel","Model","extend","name","displayName","initialize","attributes","options","this","_","action","urlRoot","API","schema","rent","type","tenants","start_date","end_date","charges","scheduled","amount","date","recurring","first_month","last_month","security","split","filters","start_moment","Backbone","computed","get","moment","utc","end_moment","number_pretty","number","test","address_short","property","address","city","utils","stateAbbr","state","term","start","format","end","lease","length","isNew","duration","diff","months","parseFloat","Math","round","asMonths","toFixed","days","asDays","auto","filter","charge","active","today","containsDate","date_to_check","validation","unit","required","validateMoney","charges.scheduled","validateCharges","charges.recurring"],"mappings":"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","file":"LeaseModel.js","sourcesContent":["/**\n * LeaseModel.js\n */\n\ndefine([\n  'app'\n],\nfunction(app) {\n\n  var LeaseModel = app.Model.extend({\n\n    name: 'lease',\n    displayName: 'lease',\n\n    initialize: function(attributes, options) {\n      if (!options) options = {};\n      if (!this.options) this.options = {};\n\n      _.extend(this.options, options);\n\n      if (!this.options.action) this.options.action = '';\n    },\n\n    urlRoot: function() {\n      return app.API() + 'leases/' + this.options.action;\n    },\n\n    schema: {\n      rent: {\n        type: 'money'\n      },\n      tenants: {\n        type: 'array'\n      },\n      start_date: {\n        type: 'ISO'\n      },\n      end_date: {\n        type: 'ISO'\n      },\n      charges: {\n        scheduled: [{\n          amount: {\n            type: 'charge'\n          },\n          date: {\n            type: 'ISO'\n          }\n        }],\n        recurring: [{\n          amount: {\n            type: 'charge'\n          }\n        }]\n      },\n      // for data import only\n      first_month: {\n        type: 'money'\n      },\n      last_month: {\n        type: 'money'\n      },\n      security: {\n        type: 'money'\n      },\n      split: {\n        type: 'money_or_zero'\n      }\n    },\n\n    filters: [\n      'lease',\n      'term',\n      'address',\n      'address_short',\n      'length',\n      'number_pretty',\n      'start_moment',\n      'end_moment',\n      'first_month',\n      'last_month'\n    ],\n\n    start_moment: Backbone.computed('start_date', function() {\n      var start_date = this.get('start_date');\n      if (!start_date) return;\n      return moment.utc(start_date);\n    }),\n\n    end_moment: Backbone.computed('end_date', function() {\n      var end_date = this.get('end_date');\n      if (!end_date) return;\n      return moment.utc(end_date);\n    }),\n\n    number_pretty: Backbone.computed('unit', function() {\n      var number = this.get('unit.number');\n      if (!number) return;\n\n      if (/^[\\d]/.test(number)) number = '#' + number;\n      return number;\n    }),\n\n    address_short: Backbone.computed('property', 'number_pretty', function() {\n      var property = this.get('property');\n      var number = this.get('number_pretty');\n      if (!property || !number) return;\n      return property.address + ' ' + number;\n    }),\n\n    address: Backbone.computed('property', 'number_pretty', function() {\n      var property = this.get('property');\n      var number = this.get('number_pretty');\n      if (!property || !number) return;\n      if (typeof property === 'string') return;\n      return property.address + ' ' + number + ', ' + property.city + ' ' + app.utils.stateAbbr(property.state);\n    }),\n\n    term: Backbone.computed('start_moment', 'end_moment', function() {\n      var start = this.get('start_moment');\n      if (!start) return;\n\n      start = start.format('MM/DD/YY');\n      var end = this.get('end_moment') ? this.get('end_moment').format('MM/DD/YY') : 'N/A';\n\n      if (!start) return;\n\n      return start + ' â€“ ' + end;\n    }),\n\n    lease: Backbone.computed('term', 'address', function() {\n      var address = this.get('address');\n      var term = this.get('term');\n\n      if (!term) return;\n      if (!address) return;\n\n      return address + ', ' + term;\n    }),\n\n    length: Backbone.computed('start_date', 'end_date', function() { \n      if (this.isNew()) return '';\n      var start = this.get('start_moment');\n      var end = this.get('end_moment');\n\n      if (!start) return;\n\n      // NOTE: moment assumes inclusive range, we need exclusive, so we need to \n      // add a day to the end date to calculate length\n\n      if (!end) return 'N/A';\n      var duration = moment.duration(end.diff(start));\n\n      // round to the nearest .5 and remove the decimal if zero\n      var months = parseFloat((Math.round(duration.asMonths() * 2) / 2).toFixed(1));\n      var days = duration.asDays();\n\n      var auto = months > 1 ? months + ' Months' : days + ' Days';\n\n      return {\n        months: months,\n        days: days,\n        auto: auto\n      };\n    }),\n\n    first_month: Backbone.computed('charges', function() { \n      var charges = this.get('charges.scheduled');\n      if (!charges) return;\n\n      charges = charges.filter(function(charge) {\n        return charge.type == 'first_month' ? true : false;\n      });\n\n      return charges.length === 1 ? charges[0] : false;\n    }),\n\n    last_month: Backbone.computed('charges', function() { \n      var charges = this.get('charges.scheduled');\n      if (!charges) return;\n\n      charges = charges.filter(function(charge) {\n        return charge.type == 'last_month' ? true : false;\n      });\n\n      return charges.length === 1 ? charges[0] : false;\n    }),\n\n    active: Backbone.computed('start_moment', 'end_moment', function() {\n      var start_moment = this.get('start_moment');\n      if (!start_moment) return;\n\n      var today = moment.utc();\n      return this.containsDate(today);\n\n    }),\n\n    containsDate: function(date) {\n      var date_to_check = moment.utc(date);\n      var start_moment = this.get('start_moment');\n      var end_moment = this.get('end_moment');\n\n      if (!end_moment && start_moment < date_to_check) return true;\n\n      if (start_moment <= date_to_check && date_to_check <= end_moment) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    validation: {\n      unit: {\n        required: true\n      },\n      start_date: {\n        required: true\n      },\n      tenants: {\n        required: true\n      },\n      rent: app.utils.validateMoney,\n\n      'charges.scheduled': app.utils.validateCharges,\n      'charges.recurring': app.utils.validateCharges\n    }\n\n  });\n\n  return LeaseModel; \n\n});"]}