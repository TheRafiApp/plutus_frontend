{"version":3,"sources":["model/users/UserModel.js"],"names":["define","app","UserModel","Model","extend","name","displayName","initialize","attributes","options","this","_","role","on","updatePhone","urlRoot","API","defaults","first_name","last_name","schema","phone","type","charges","amount","filters","full_name","Backbone","computed","isNew","escape","get","initials","toUpperCase","profile","phone_pretty","utils","prettyPhone","dwolla_account","contains","account_location","phone_number","uglyPhone","set","validation","required","maxLength","email","input","field","validateContact","resendInvitation","data","callbacks","url","id","deferred","$","Deferred","request","path","success","r","resolve","error","e","reject","unremove","method"],"mappings":"AAIAA,QACE,OAEF,SAASC,GAEP,GAAIC,GAAYD,EAAIE,MAAMC,QAExBC,KAAM,OACNC,YAAa,YAEbC,WAAY,SAASC,EAAYC,GAC1BA,IAASA,MACTC,KAAKD,UAASC,KAAKD,YAExBC,KAAKD,QAAUE,EAAEP,OAAOM,KAAKD,QAASA,GACjCC,KAAKD,QAAQG,OAAMF,KAAKD,QAAQG,KAAO,SAG5CF,KAAKG,GAAG,sBAAuBH,KAAKI,YAAaJ,OAGnDK,QAAS,WACP,MAAOd,GAAIe,MAAQN,KAAKD,QAAQG,KAAO,KAGzCK,UACEC,WAAY,GACZC,UAAW,IAGbC,QACEC,OACEC,KAAM,SAERC,UACEC,QACEF,KAAM,SAERD,OACEC,KAAM,YAKZG,SACE,YACA,OACA,UACA,eACA,WACA,SACA,UACA,UACA,WAGFC,UAAWC,SAASC,SAAS,aAAc,YAAa,WACtD,MAAIlB,MAAKmB,QAAgB,GAClBlB,EAAEmB,OAAOpB,KAAKqB,IAAI,cAAgB,IAAMrB,KAAKqB,IAAI,cAAgB,MAG1EC,SAAUL,SAASC,SAAS,aAAc,YAAa,WACrD,MAAIlB,MAAKmB,QAAgB,GAClBlB,EAAEmB,OAAOpB,KAAKqB,IAAI,cAAc,GAAK,GAAKrB,KAAKqB,IAAI,aAAa,IAAIE,gBAG7EC,QAASP,SAASC,SAAS,MAAO,OAAQ,WACxC,GAAIhB,GAAOF,KAAKqB,IAAI,OACpB,IAAKnB,EACL,MAAO,IAAMA,EAAO,KAAOF,KAAKqB,IAAI,SAGtCI,aAAcR,SAASC,SAAS,QAAS,WACvC,GAAIP,GAAQX,KAAKqB,IAAI,QACrB,IAAKV,EAEL,MAAOpB,GAAImC,MAAMC,YAAYhB,KAG/BiB,eAAgBX,SAASC,SAAS,OAAQ,SAAU,UAAW,WAC7D,GAAIhB,GAAOF,KAAKqB,IAAI,OACpB,KAAM,QAAS,UAAUQ,SAAS3B,GAAlC,CACA,GAAI4B,GAAmB,EAMvB,OAJa,UAAT5B,IAAkB4B,EAAmB,YAEzCA,GAAoB,SAEb9B,KAAKqB,IAAIS,MAGlB1B,YAAa,WACX,GAAI2B,GAAexC,EAAImC,MAAMM,UAAUhC,KAAKqB,IAAI,gBAChDrB,MAAKiC,IAAI,QAASF,IAGpBG,YACE1B,YACE2B,UAAU,EACVC,UAAW,IAIb3B,WACE0B,UAAU,EACVC,UAAW,IAIbC,MAAO,SAASC,EAAOC,EAAOzC,GAC5B,MAAKwC,GACDA,IAAU/C,EAAImC,MAAMc,gBAAgBF,GAAe,qCAAvD,OADmB,qBAIrB3B,MAAO,SAAS2B,EAAOC,EAAOzC,GAC5B,GAAIwC,IAAU/C,EAAImC,MAAMc,gBAAgBF,GAAQ,MAAO,sCAiC3DG,iBAAkB,SAASC,EAAMC,GAC1BD,IAAMA,KAEX,IAAIE,GAAM5C,KAAKqB,IAAI,QAAU,KAAOrB,KAAK6C,GAAK,YAC1CC,EAAWC,EAAEC,UAWjB,OATAzD,GAAImC,MAAMuB,SACRP,KAAMA,EACNQ,KAAMN,IACLO,QAAQ,SAASC,GAClB,MAAON,GAASO,QAAQD,KACvBE,MAAM,SAASC,GAChB,MAAOT,GAASU,OAAOD,KAGlBT,GAGTW,SAAU,SAASf,EAAMC,GAClBD,IAAMA,KAEX,IAAIE,GAAM5C,KAAKqB,IAAI,QAAU,KAAOrB,KAAK6C,GAAK,YAC1CC,EAAWC,EAAEC,UAYjB,OAVAzD,GAAImC,MAAMuB,SACRP,KAAMA,EACNQ,KAAMN,EACNc,OAAQ,QACPP,QAAQ,SAASC,GAClB,MAAON,GAASO,QAAQD,KACvBE,MAAM,SAASC,GAChB,MAAOT,GAASU,OAAOD,KAGlBT,IAKX,OAAOtD","file":"UserModel.js","sourcesContent":["/**\n * UserModel.js\n */\n\ndefine([\n  'app'\n],\nfunction(app) {\n\n  var UserModel = app.Model.extend({\n\n    name: 'user',\n    displayName: 'full_name',\n\n    initialize: function(attributes, options) {\n      if (!options) options = {};\n      if (!this.options) this.options = {};\n\n      this.options = _.extend(this.options, options);\n      if (!this.options.role) this.options.role = 'users';\n\n      // event listeners for computed fields\n      this.on('change:phone_pretty', this.updatePhone, this);\n    },\n\n    urlRoot: function() {\n      return app.API() + this.options.role + '/';\n    },\n\n    defaults: {\n      first_name: '',\n      last_name: '',\n    },\n\n    schema: {\n      phone: {\n        type: 'phone'\n      },\n      charges: [{\n        amount: {\n          type: 'money'\n        },\n        phone: {\n          type: 'phone'\n        }\n      }]\n    },\n\n    filters: [\n      'full_name',\n      'role',\n      'profile',\n      'phone_pretty',\n      'initials',\n      'status',\n      'created',\n      'updated',\n      'intials',\n    ],\n\n    full_name: Backbone.computed('first_name', 'last_name', function() {\n      if (this.isNew()) return '';\n      return _.escape(this.get('first_name') + ' ' + this.get('last_name') || '');\n    }),\n\n    initials: Backbone.computed('first_name', 'last_name', function() {\n      if (this.isNew()) return '';\n      return _.escape(this.get('first_name')[0] + '' + this.get('last_name')[0]).toUpperCase();\n    }),\n\n    profile: Backbone.computed('_id', 'role', function() {\n      var role = this.get('role');\n      if (!role) return;\n      return '/' + role + 's/' + this.get('_id');\n    }),\n\n    phone_pretty: Backbone.computed('phone', function() {\n      var phone = this.get('phone');\n      if (!phone) return;\n      \n      return app.utils.prettyPhone(phone);\n    }),\n\n    dwolla_account: Backbone.computed('role', 'dwolla', 'company', function() {\n      var role = this.get('role');\n      if (!['admin', 'tenant'].contains(role)) return;\n      var account_location = '';\n\n      if (role === 'admin') account_location = 'company.';\n\n      account_location += 'dwolla';\n\n      return this.get(account_location);\n    }),\n\n    updatePhone: function() {\n      var phone_number = app.utils.uglyPhone(this.get('phone_pretty'));\n      this.set('phone', phone_number);\n    },\n\n    validation: {\n      first_name: {\n        required: true,\n        maxLength: 60,\n        // pattern: 'alphabetical'\n      },\n\n      last_name: {\n        required: true,\n        maxLength: 60,\n        // pattern: 'alphabetical'\n      },\n\n      email: function(input, field, attributes) {\n        if (!input) return 'Email is required';\n        if (input && !app.utils.validateContact(input)) return 'Please enter a valid email address';\n      },\n\n      phone: function(input, field, attributes) {\n        if (input && !app.utils.validateContact(input)) return 'Please enter a valid phone number';\n      },\n\n      // password: {\n      //   minLength: 8,\n      //   pattern: 'password'\n      // },\n\n      // email: function(input, field, attributes) {\n      //   if (!input && !attributes.phone) {\n      //     return 'You must enter at least one contact method.';\n      //   } else if (!attributes.phone) {\n      //     if (!app.utils.validateContact(input)) return 'Please enter a valid email address';\n      //   } else {\n      //     if (input) {\n      //       if (!app.utils.validateContact(input)) return 'Please enter a valid email address';\n      //     }\n      //   }\n      // },\n      // phone: function(input, field, attributes) {\n      //   if (!input && !attributes.email) {\n      //     return 'You must enter at least one contact method.';\n      //   } else if (!attributes.email) {\n      //     if (!app.utils.validateContact(input)) return 'Please enter a valid phone number';\n      //   } else {\n      //     if (input) {\n      //       if (!app.utils.validateContact(input)) return 'Please enter a valid phone number';\n      //     }\n      //   }\n      // },\n      // \n    },\n\n    resendInvitation: function(data, callbacks) {\n      if (!data) data = {};\n      \n      var url = this.get('role') + 's/' + this.id + '/reinvite';\n      var deferred = $.Deferred();\n\n      app.utils.request({\n        data: data, \n        path: url\n      }).success(function(r) {\n        return deferred.resolve(r);\n      }).error(function(e) {\n        return deferred.reject(e);\n      });\n\n      return deferred;\n    },\n\n    unremove: function(data, callbacks) {\n      if (!data) data = {};\n \n      var url = this.get('role') + 's/' + this.id + '/unremove';\n      var deferred = $.Deferred();\n\n      app.utils.request({\n        data: data, \n        path: url,\n        method: 'PUT',\n      }).success(function(r) {\n        return deferred.resolve(r);\n      }).error(function(e) {\n        return deferred.reject(e);\n      });\n\n      return deferred;\n    }\n\n  });\n\n  return UserModel; \n\n});"]}