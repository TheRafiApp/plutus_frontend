{"version":3,"sources":["model/session/SessionModel.js"],"names":["define","app","AccountModel","SessionModel","Backbone","Model","extend","defaults","logged_in","user_role","tokens","initialize","this","updateAjaxSetup","models","user","bind","updateSession","url","API","isSuperAdmin","get","isAdmin","isManager","isTenant","isLandlord","isOnboarded","_user","config","debug","utils","stash","getItem","session","toJSON","contains","role","steps","getOnboardingSteps","some","step","value","setTokens","authorization","setItem","refresh","activation","removeItem","set","clear","collections","companies","reset","views","accountView","model","appView","close","activateView","currentView","self","$","ajaxSetup","contentType","dataType","beforeSend","xhr","injectHeader","act_token","pass","updateSessionUser","userData","authorization_token","refresh_token","key","_value","setRequestHeader","login","options","callback","request","path","method","data","logout","postPassword","putPassword","setPassword","verifyCode","verifyAuthentication","then","response","activation_token","requestAuthentication","updateLease","declineInvitation","refreshTokens","deferred","Deferred","resolve","fail","error","router","navigate","trigger","replace","reject"],"mappings":"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","file":"SessionModel.js","sourcesContent":["/**\n * SessionModel.js\n */\n\ndefine([\n  'app',\n  'model/account/AccountModel'\n],\nfunction(app, AccountModel) {\n\n  var SessionModel = Backbone.Model.extend({\n\n    defaults: {\n      logged_in: false,\n      user_role: null\n    },\n\n    tokens: {},\n\n    initialize: function() {\n      this.updateAjaxSetup();\n      // store AccountModel for use elsewhere\n      app.models.AccountModel = AccountModel;\n      this.user = new AccountModel();\n\n      this.bind('change:logged_in', this.updateSession, this);\n    },\n\n    url: function() {\n      return app.API();\n    },\n\n    isSuperAdmin: function() {\n      return this.get('user_role') == 'superadmin';\n    },\n\n    isAdmin: function() {\n      return this.get('user_role') == 'admin';\n    },\n\n    isManager: function() {\n      return this.get('user_role') == 'manager';\n    },\n\n    isTenant: function() {\n      return this.get('user_role') == 'tenant';\n    },\n\n    isLandlord: function() {\n      return this.get('user_role') == 'landlord';\n    },\n\n    isOnboarded: function(_user) {\n      if (app.config.debug && app.utils.stash.getItem('bypass-activation')) return true;\n\n      var user = _user || app.session.user.toJSON();\n      \n      // superadmins do not get onboarded\n      if (['superadmin'].contains(user.role)) return true;\n\n      // establish the relevant steps to check\n      var steps = app.utils.getOnboardingSteps(user);\n\n      // check if steps returned false (doesn't include empty array)\n      if (!steps) return false;\n\n      // check if any steps are incomplete\n      return !steps.some(function(step) {\n        return !step.value;\n      });\n    },\n\n    setTokens: function(tokens) {\n      if (tokens.authorization) app.utils.stash.setItem('authorization', tokens.authorization);\n      if (tokens.refresh) app.utils.stash.setItem('refresh', tokens.refresh);\n      if (tokens.activation) app.utils.stash.setItem('activation', tokens.activation);\n\n      this.updateAjaxSetup();\n\n      return this;\n    },\n\n    updateSession: function() {\n      // always clear activation tokens\n      app.utils.stash.removeItem('activation');\n\n      // log in\n      if (this.get('logged_in')) {\n        this.tokens = {};\n        this.set('user_role', this.user.get('role'));\n\n      // log out\n      } else {\n        // set last-login so we can populate the login form, with either phone or email\n        app.utils.stash.setItem('last-login', this.user.get('email') || this.user.get('phone'));\n        app.utils.stash.removeItem('authorization');\n        app.utils.stash.removeItem('refresh');\n\n        // clear session data\n        this.user.clear().set(this.user.defaults);\n\n        if (app.collections.companies) {\n          app.collections.companies.reset();\n          delete app.collections.companies;\n        }\n\n        // make sure views are all cleared\n        if (app.views.accountView) {\n          app.views.accountView.model.clear();\n          delete app.views.accountView;\n        }\n\n        if (app.views.appView) {\n          app.views.appView.close();\n          delete app.views.appView;\n        }\n          \n        if (app.views.activateView) {\n          app.views.activateView.close();\n          delete app.views.activateView;\n        }\n\n        if (app.views.currentView) {\n          app.views.currentView.close();\n          delete app.views.currentView;\n        }\n      }\n    },\n\n    updateAjaxSetup: function() {\n      var self = this;\n\n      $.ajaxSetup({\n        contentType: 'application/json',\n        dataType: 'json',\n        beforeSend: function(xhr) {\n          self.injectHeader(xhr, 'Authorization', app.utils.stash.getItem('authorization'));\n          var act_token = app.utils.stash.getItem('activation');\n\n          if (act_token) self.injectHeader(xhr, 'Activation', act_token);\n          if (self.tokens.pass) self.injectHeader(xhr, 'Password', self.tokens.pass);\n        },\n      });\n    },\n\n    // Update Session\n\n    updateSessionUser: function(userData) {\n      this.user.set(userData);\n      this.setTokens({\n        authorization: userData.session.authorization_token, \n        refresh: userData.session.refresh_token\n      });\n    },\n\n    // Inject Headers\n\n    injectHeader: function(xhr, key, _value) {\n      var value = _value;\n      if (!_value) value = '';\n      xhr.setRequestHeader(key, value);\n      return xhr;\n    },\n\n    /**\n     * Login\n     * @param  {[object]}   options   [login credentials]\n     * @param  {Function} callback    [optional callbacks (also uses promises)]\n     * @return {[XHR object]}         [returns request]\n     */\n    \n    login: function(options, callback) {\n      if (!options) options = {};\n      var refresh = options.refresh ? true : false;\n\n      return app.utils.request({\n        path: 'users/login',\n        method: 'POST',\n        data: options.data,\n        refresh: refresh\n      }, callback);\n    },\n\n    /**\n     * Logout\n     * @param  {Function} callback    [optional callbacks (also uses promises)]\n     * @return {[XHR object]}         [returns request]\n     */\n    \n    logout: function(callback) {\n      return app.utils.request({\n        path: 'users/logout',\n        method: 'POST',\n        refresh: true\n      }, callback);\n    },\n\n    /**\n     * Refresh\n     * @param  {[object]}   options   [login credentials]\n     * @param  {Function} callback    [optional callbacks (also uses promises)]\n     * @return {[XHR object]}         [returns request]\n     */\n    \n    refresh: function(options, callback) {\n      if (!options) options = {};\n\n      return app.utils.request({\n        // path: 'users/login/refresh',\n        path: 'users/tokens',\n        method: 'GET',\n        data: options.data,\n        refresh: true\n      }, callback);\n    },\n\n    // Forgot Password\n    \n    postPassword: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/password',\n        method: 'POST'\n      }, callback);\n    },\n\n    putPassword: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/password',\n        method: 'PUT'\n      }, callback);\n    },\n\n    // Account Activation\n\n    setPassword: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/activate/password',\n        method: 'POST'\n      }, callback);\n    },\n\n    verifyCode: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/contact',\n        method: 'PUT'\n      }, callback);\n    },\n\n    // Reset & Activation Tokens\n\n    verifyAuthentication: function(data, callback) {\n      var self = this;\n      var request = app.utils.request({\n        data: data,\n        path: 'users/activate/contact',\n        method: 'PUT'\n      }, callback);\n\n      request.then(function(response) {\n        if (response.session && response.session.activation_token) {\n          self.setTokens({\n            activation: response.session.activation_token\n          });\n        }\n      });\n\n      return request;\n    },\n\n    requestAuthentication: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/activate/contact',\n        method: 'POST'\n      }, callback);\n    },\n\n    // Set split\n    \n    updateLease: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/activate/leases',\n        method: 'PUT'\n      }, callback);\n    },\n\n    // Decline invite\n    \n    declineInvitation: function(data, callback) {\n      return app.utils.request({\n        data: data,\n        path: 'users/activate/decline',\n        method: 'POST'\n      }, callback);\n    },\n\n    // Dwolla code\n\n    // sendDwollaCode: function(data, callback) {\n    //   var at = app.utils.stash.getItem('activation');\n    //   var path = at ? 'users/activate' : 'dwolla';\n\n    //   return app.utils.request({\n    //     data: data,\n    //     path: path + '/receive_authorization_code',\n    //     method: 'POST'\n    //   }, callback);\n    // },\n\n    // Activation funding sources\n    \n    // getFundingSources: function(data, callback) {\n    //   var at = app.utils.stash.getItem('activation');\n    //   var path = at ? 'users/activate' : 'dwolla';\n\n    //   return app.utils.request({\n    //     data: data,\n    //     path: path + '/funding_sources',\n    //     method: 'GET'\n    //   }, callback);\n    // },\n\n    // setFundingSource: function(data, callback) {\n    //   var at = app.utils.stash.getItem('activation');\n    //   var path = at ? 'users/activate' : 'dwolla';\n\n    //   return app.utils.request({\n    //     data: data,\n    //     path: path + '/funding_sources',\n    //     method: 'PUT'\n    //   }, callback);\n    // },\n\n    // Unlink Dwolla account\n\n    // unlinkDwolla: function(data, callback) {\n    //   return app.utils.request({\n    //     data: data,\n    //     path: 'dwolla/account_unlink',\n    //     method: 'POST'\n    //   }, callback);\n    // },\n\n    // Refreshing Tokens\n\n    refreshTokens: function() {\n      var self = this;\n      var deferred = new $.Deferred();\n\n      app.utils.request({ \n        path: 'users/tokens',\n        method: 'GET',\n        refresh: true,\n\n      }).then(function(response) {\n        self.updateSessionUser( response || {} );\n        // console.log('👍👍👍 refreshTokens 👍👍👍');\n        return deferred.resolve(response);\n      }).fail(function(error) {\n        // console.warn(error);\n        app.router.navigate('/', { trigger: true, replace: true });\n        return deferred.reject(error);\n      });\n\n      return deferred;\n    }\n    \n  });\n\n  return SessionModel;\n  \n});"]}