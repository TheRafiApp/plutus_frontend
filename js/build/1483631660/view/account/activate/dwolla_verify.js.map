{"version":3,"sources":["view/account/activate/dwolla_verify.js"],"names":["define","app","DwollaAccountModel","DwollaBusinessModel","OnboardingTemplate","ModalTermsView","Backbone","View","extend","className","template","_","events","blur .zip","keyup .zip","click .action-next","change #agree","initialize","options","this","dwolla_data","parentView","user","on","decline","type","model","Validation","bind","render","$el","html","toJSON","logo","templates","utils","prepInputs","find","mask","keyupZip","e","which","zipChange","value","currentTarget","length","controls","fieldError","element","error","getAddressData","zip","self","request","path","method","noheaders","then","response","updateAddress","places","address","$inputs","data","$","each","i","$input","prop","val","constructData","$form","formData","serializeObject","confirm","errors","$agreement","terms_accepted","is","validate","formatted_data","schema","process","email","get","businessClassification","loadLock","save","success","set","next","fail","handleError"],"mappings":"AAIAA,QACE,MACA,mCACA,sCACA,qDACA,8BAEF,SAASC,EAAKC,EAAoBC,EAAqBC,EAAoBC,GAEzE,MAAOC,UAASC,KAAKC,QAEnBC,UAAW,cACXC,SAAUC,EAAED,SAASN,GAErBQ,QACEC,YAAa,YACbC,aAAc,WACdC,qBAAsB,UACtBC,gBAAiB,SAGnBC,WAAY,SAASC,GACfA,GAASP,EAAEH,OAAOW,KAAMD,GAE5BC,KAAKC,YAAcD,KAAKE,WAAWD,YACnCD,KAAKG,KAAOH,KAAKE,WAAWC,KAE5BH,KAAKI,GAAG,eAAgBJ,KAAKK,QAASL,KAEtC,IAAIM,GAAON,KAAKC,YAAYK,IAEf,cAATA,EACFN,KAAKO,MAAQ,GAAIxB,GACC,aAATuB,IACTN,KAAKO,MAAQ,GAAIvB,IAGnBG,SAASqB,WAAWC,KAAKT,MAEzBA,KAAKU,UAGPA,OAAQ,WAaN,MAVAV,MAAKW,IAAIC,KAAKZ,KAAKT,UACjBe,KAAMN,KAAKC,YAAYK,KACvBH,KAAMH,KAAKG,KAAKU,SAChBC,KAAMhC,EAAIiC,UAAUD,UAGtBhC,EAAIkC,MAAMC,WAAWjB,MAErBA,KAAKW,IAAIO,KAAK,qBAAqBC,KAAK,cAEjCnB,MAGToB,SAAU,SAASC,GAED,KAAZA,EAAEC,OACJtB,KAAKuB,UAAUF,IAInBE,UAAW,SAASF,GAClB,GAAIG,GAAQH,EAAEI,cAAcD,KACP,KAAjBA,EAAME,OACR5C,EAAI6C,SAASC,YACXC,QAASR,EAAEI,cACXK,MAAO,kCAGT9B,KAAK+B,eAAeP,IAIxBO,eAAgB,SAASC,GACvB,GAAIC,GAAOjC,KAEPkC,EAAUpD,EAAIkC,MAAMkB,SACtBC,KAAM,gCAAkCH,EACxCI,OAAQ,MACRC,WAAW,GAGbH,GAAQI,KAAK,SAASC,GACpBN,EAAKO,cAAcD,EAASE,OAAO,OAKvCD,cAAe,SAASE,GACtB,GAAIC,GAAU3C,KAAKW,IAAIO,KAAK,iBACxB0B,GACFF,EAAQ,cACRA,EAAQ,sBAGVG,GAAEC,KAAKH,EAAS,SAASI,EAAGC,GAC1BH,EAAEG,GAAQC,KAAK,YAAY,GAAOC,IAAIN,EAAKG,OAI/CI,cAAe,WACb,GAAIC,GAAQpD,KAAKW,IAAIO,KAAK,QACtBmC,EAAWD,EAAME,iBAErB,OAAOD,IA2BTE,QAAS,WACP,GAAItB,GAAOjC,KACPqD,EAAWrD,KAAKmD,gBAEhBK,GAAS,EACTC,EAAazD,KAAKW,IAAIO,KAAK,UAC3BwC,EAAiBD,EAAWE,GAAG,WAYnC,IAXKD,IAEH5E,EAAI6C,SAASC,YACXC,QAAS4B,EACT3B,MAAO,qCAET0B,GAAS,GAGN1E,EAAIkC,MAAM4C,SAAS5D,KAAMqD,KAAWG,GAAS,IAE9CA,EAAJ,CAEA,GAAIK,GAAiB/E,EAAIgF,OAAOC,QAAQV,EAAUrD,KAAKO,MAGvDsD,GAAeG,MAAQhE,KAAKG,KAAK8D,IAAI,SACrCJ,EAAevD,KAAON,KAAKC,YAAYK,KAEX,aAAxBuD,EAAevD,OAAqBuD,EAAeK,uBAAyB,wCAEhFpF,EAAI6C,SAASwC,WAEbnE,KAAKO,MAAM6D,KAAKP,GAAgBQ,QAAQ,SAASlE,GAC/C8B,EAAK/B,WAAWC,KAAKmE,IAAInE,GACzBrB,EAAI6C,SAASwC,WACblC,EAAK/B,WAAWqE,SACfC,KAAK,SAAS1C,GACfhD,EAAI6C,SAAS8C,YAAY3C","file":"dwolla_verify.js","sourcesContent":["/**\n * account/onboarding/dwolla_verify.js\n */\n\ndefine([\n  'app',\n  'model/account/DwollaAccountModel',\n  'model/companies/DwollaBusinessModel',\n  'text!templates/account/activate/dwolla_verify.html',\n  'view/modals/ModalTermsView'\n],\nfunction(app, DwollaAccountModel, DwollaBusinessModel, OnboardingTemplate, ModalTermsView) {\n\n  return Backbone.View.extend({\n\n    className: 'dwolla wide',\n    template: _.template(OnboardingTemplate),\n\n    events: {\n      'blur .zip': 'zipChange',\n      'keyup .zip': 'keyupZip',\n      'click .action-next': 'confirm',\n      'change #agree': 'agree'\n    },\n\n    initialize: function(options) {\n      if (options) _.extend(this, options);\n\n      this.dwolla_data = this.parentView.dwolla_data;\n      this.user = this.parentView.user;\n\n      this.on('declineTerms', this.decline, this);\n\n      var type = this.dwolla_data.type;\n\n      if (type === 'personal') {\n        this.model = new DwollaAccountModel();\n      } else if (type === 'business') {\n        this.model = new DwollaBusinessModel();\n      }\n      \n      Backbone.Validation.bind(this);\n\n      this.render();\n    },\n\n    render: function() {\n      var self = this;\n\n      this.$el.html(this.template({\n        type: this.dwolla_data.type,\n        user: this.user.toJSON(),\n        logo: app.templates.logo()\n      }));\n\n      app.utils.prepInputs(this);\n\n      this.$el.find('input[name=\"ein\"]').mask('00-0000000');\n\n      return this;\n    },\n\n    keyupZip: function(e) {\n      // esc\n      if (e.which === 13) {\n        this.zipChange(e);\n      }\n    },\n\n    zipChange: function(e) {\n      var value = e.currentTarget.value;\n      if (value.length !== 5) {\n        app.controls.fieldError({\n          element: e.currentTarget,\n          error: 'Please enter a valid zip code'\n        });\n      } else {\n        this.getAddressData(value);\n      }\n    },\n\n    getAddressData: function(zip) {\n      var self = this;\n\n      var request = app.utils.request({\n        path: 'https://api.zippopotam.us/us/' + zip,\n        method: 'GET',\n        noheaders: true\n      });\n\n      request.then(function(response) {\n        self.updateAddress(response.places[0]);\n      });\n\n    },\n\n    updateAddress: function(address) {\n      var $inputs = this.$el.find('.city, .state');\n      var data = [\n        address['place name'],\n        address['state abbreviation']\n      ];\n\n      $.each($inputs, function(i, $input) {\n        $($input).prop('disabled', false).val(data[i]);\n      });\n    },\n\n    constructData: function() {\n      var $form = this.$el.find('form');\n      var formData = $form.serializeObject();\n\n      return formData;\n    },\n\n    // agree: function(e) {\n    //   if (this.agreed) return;\n\n    //   this.agreed = true;\n\n    //   this.modal = new ModalTermsView({\n    //     action: 'agree',\n    //     // model: this.model,\n    //     eventName: 'termsAgreed',\n    //     context: this\n    //   });\n\n    // },\n\n\n    // decline: function() {\n    //   this.$el.find('#agree').prop('checked', false);\n\n    //   var self = this;\n    //   setTimeout(function() {\n    //     self.$el.find('#agree').prop('checked', false);\n    //   }, 20);\n    // },\n\n    confirm: function() {\n      var self = this;\n      var formData = this.constructData();\n\n      var errors = false;\n      var $agreement = this.$el.find('#agree');\n      var terms_accepted = $agreement.is(':checked');\n      if (!terms_accepted) {\n\n        app.controls.fieldError({\n          element: $agreement,\n          error: 'Please agree to the terms of use'\n        });\n        errors = true;\n      }\n\n      if (!app.utils.validate(this, formData)) errors = true;\n\n      if (errors) return;\n\n      var formatted_data = app.schema.process(formData, this.model);\n\n      // inject missing data\n      formatted_data.email = this.user.get('email');\n      formatted_data.type = this.dwolla_data.type;\n\n      if (formatted_data.type === 'business') formatted_data.businessClassification = '9ed492ab-7d6f-11e3-9907-5404a6144203';\n\n      app.controls.loadLock();\n\n      this.model.save(formatted_data).success(function(user) {\n        self.parentView.user.set(user);\n        app.controls.loadLock();\n        self.parentView.next();\n      }).fail(function(error) {\n        app.controls.handleError(error);\n      });\n    }\n\n  });\n});"]}