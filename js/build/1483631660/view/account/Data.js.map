{"version":3,"sources":["view/account/Data.js"],"names":["define","app","PropertyModel","UnitModel","LeaseModel","TenantModel","AccountDataTemplate","SummaryTemplate","jszip","Backbone","View","extend","className","events","click .action-cancel","click .action-save","change #file-input","drop","dragover","dragleave","supported","propertyFields","unitFields","tenantFields","template","_","template_summary","initialize","window","JSZip","this","render","on","submitData","queue","property","unit","lease","tenant","$el","html","delegateEvents","filesChosen","event","filename","$input","find","$label","target","value","files","defaultValue","length","attr","replace","split","pop","children","text","processFiles","dragOver","e","preventDefault","addClass","dragOff","removeClass","filesDropped","stopPropagation","originalEvent","dataTransfer","errors","error","self","promises","output","each","file","reader","FileReader","name","deferred","$","Deferred","ext","indexOf","slice","alerts","type","reject","onload","data","result","workbook","XLSX","read","SheetNames","forEach","sheetName","sheet","Sheets","json","utils","sheet_to_json","parsed","processData","push","resolve","readAsBinaryString","when","apply","then","validateAll","invalidate","message","Error","msg","displayErrorMessage","_input","currentLayer","currentUnit","currentTenant","invalidKeys","row","index","getModelType","warn","key","raw","address","map","x","trim","city","state","zip","country","location","getLocation","units","leases","number","beds","baths","sq_ft","rent","parseMoney","start_date","end_date","first_month","last_month","security","tenants","first_name","last_name","phone","validateContact","email","console","keyErrors","parseKeyErrors","displayKeyErrors","log","i","filter","isEmpty","error_array","stringified","JSON","stringify","uniq","parse","displayMessage","$message","$messages","append","errorMessage","undefined","$error","findVal","object","some","v","parseCheckAll","validateModel","setTimeout","verifyData","_data","_modelName","model","validation","required","schema","process","set","Validation","mixin","validation_errors","validate","queue_empty","modelNames","toJSON","join","delay","fadeOut","showSummary","clearTimeout","promptSave","controls","modalConfirm","loadLock","sendData","arguments","router","navigate","trigger","success","fail","options","callback","request","path","method","refresh","properties","resetView","reset","fadeIn"],"mappings":"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","file":"Data.js","sourcesContent":["/**\n * account/Data.js\n */\n\ndefine([\n  'app',\n  'model/properties/PropertyModel',\n  'model/properties/UnitModel',\n  'model/leases/LeaseModel',\n  'model/users/TenantModel',\n  'text!templates/account/account-data.html',\n  'text!templates/repeaters/import-summary.html',\n  'jszip',\n  'xlsx',\n],\nfunction(\n  app, \n  PropertyModel, \n  UnitModel, \n  LeaseModel, \n  TenantModel, \n  AccountDataTemplate, \n  SummaryTemplate, \n  jszip\n){\n\n  return Backbone.View.extend({\n\n    className: 'account account-data',\n\n    events: {\n      'click .action-cancel': 'resetView',\n      'click .action-save': 'promptSave',\n      'change #file-input': 'filesChosen',\n      'drop': 'filesDropped',\n      'dragover': 'dragOver',\n      'dragleave': 'dragOff'\n    },\n\n    supported: [\n      'xls',\n      'xlsx',\n      'xlsm',\n      'xlsb',\n      'xml',\n      'ods'\n    ],\n\n    propertyFields: [\n      'Address',\n      'Name'\n    ],\n\n    unitFields: [\n      'Number',\n      'Beds',\n      'Baths',\n      'Sq Ft',\n      'Start Date',\n      'End Date'\n    ],\n\n    tenantFields: [\n      'First Name',\n      'Last Name',\n      'Email',\n      'Phone'\n    ],\n\n    template: _.template(AccountDataTemplate),\n    template_summary: _.template(SummaryTemplate),\n\n    initialize: function() {\n      // XLSX needs this to be a global to work properly\n      window.JSZip = jszip;\n      this.render();\n    },\n\n    render: function() {\n      this.on('confirmSave', this.submitData, this);\n\n      // queue for listing models\n      this.queue = {\n        property: [],\n        unit: [],\n        lease: [],\n        tenant: []\n      };\n\n      this.$el.html(this.template());\n      this.delegateEvents();\n\n      return this;\n    },\n\n    filesChosen: function(event) {\n      var filename = '';\n      var $input = this.$el.find('#file-input');\n      var $label = this.$el.find('.action-choose');\n\n      // if this method was manually invoked, there is no event\n      if (!event) {\n        event = { \n          target: { \n            value: '',\n            files: [] \n          }\n        }; \n      }\n\n      var files = event.target.files;\n      var defaultValue = 'CHOOOSE FILE';\n\n      // if multiple files\n      if (files && files.length > 1) {\n        filename = ($input.attr('data-multiple-caption') || '' ).replace( '{count}', files.length);\n      } else {\n        filename = event.target.value.split( '\\\\' ).pop();\n      }\n\n      // to accomodate for unsetting via ESC key\n      if (filename) {\n        $label.children('span').text(filename);\n      } else {\n        $label.children('span').text(defaultValue);\n      }\n\n      if (files.length > 0) this.processFiles(files);\n\n    },\n\n    dragOver: function(e) {\n      e.preventDefault();\n      this.$el.find('.file-drop').addClass('hover');\n    },\n\n    dragOff: function() {\n      this.$el.find('.file-drop').removeClass('hover');\n    },\n\n    filesDropped: function(e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      var files = e.originalEvent.dataTransfer.files;\n\n      this.$el.find('.file-drop').removeClass('hover').addClass('loading');\n      this.processFiles(files);\n    },\n\n    processFiles: function(files) {\n\n      this.errors = false;\n      this.$el.find('.messages').text('');\n\n      var self = this;\n      var promises = [];\n      var output = [];\n      var error;\n\n      // Process each file, return a promise\n      _.each(files, function(file) {\n        var reader = new FileReader();\n        var name = file.name;\n        var deferred = $.Deferred();\n\n        // Check the file extension\n        var ext = name.indexOf('.') > -1 ? name.split('.').slice(-1) + '' : 'unknown';\n        if (self.supported.indexOf(ext) < 0) {\n          if (ext !== 'unknown') ext = '.' + ext;\n          app.alerts.error('Filetype ' + (file.type || ext) + ' not suported');\n          self.$el.find('.file-drop').removeClass('loading');\n          error = true;\n          return deferred.reject();\n        }\n\n        reader.onload = function(e) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, { type: 'binary' });\n          \n          workbook.SheetNames.forEach(function(sheetName) {\n            var sheet = workbook.Sheets[sheetName];\n            var json = XLSX.utils.sheet_to_json(sheet);\n            var parsed = self.processData(json, sheet);\n            output.push(parsed);\n          });\n\n          return deferred.resolve();\n        };\n\n        reader.readAsBinaryString(file);\n        promises.push(deferred);\n      });\n\n      if (error) return false;\n\n      // When all files are done processing, validate all data\n      $.when.apply($, promises).then(function() {\n        self.validateAll(output);\n      });\n    },\n\n    invalidate: function(message) {\n      var error = new Error();\n      var msg = message;\n\n      this.displayErrorMessage(msg);\n\n      error.message = msg;\n      throw(error);\n      // return null;\n    },\n\n    processData: function(_input, sheet) {\n      var self = this;\n      var output = {};\n\n      // remove the header row\n      _input = _input.slice(1);\n\n      var currentLayer = 0;\n      var currentUnit = 0;\n      var currentTenant = 0;\n\n      var invalidKeys = [];\n\n      _input.forEach(function(row, index) {\n\n        // figure out what type of model it is\n        var type = self.getModelType(row);\n        if (!type) app.alerts.warn('Your data is not formatted correctly');\n\n        // format data\n        switch(type) {\n            \n          case 'property':\n            if (output.length > 0) currentLayer = 0;\n\n            currentLayer = 0;\n            currentUnit = 0;\n            currentTenant = 0;\n\n            var property = {};\n\n            for (var key in row) {\n              switch(key) {\n                case 'Address':\n\n                  // 533 Washington St, Boston, MA 02111, USA\n                  var raw = row[key];\n                  var address = raw.split(',');\n\n                  address = address.map(function(x) {\n                    return $.trim(x);\n                  });\n\n                  try {\n                    property.address = address[0];\n                    property.city = address[1];\n                    property.state = address[2].split(' ')[0];\n                    property.zip = address[2].split(' ')[1];\n                    property.country = address[3] || 'USA';\n                  } catch(e) {\n                    self.invalidate('Invalid address: ' + raw);\n                  }\n                    \n                  break;\n                \n                case 'Name':\n                  property.name = row[key];\n                  break;\n                default:\n                  var error = {};\n                  var value = key + '';\n                  var location = self.getLocation(key, sheet);\n                  error[location] = value;\n                  invalidKeys.push(error);\n                  break;\n              }\n              output = property;\n            }\n            break;\n          case 'unit_lease':\n            // if this is the first unit of the property\n            if (currentLayer === 0) {\n              currentLayer++;\n              output.units = [];\n            } else {\n              currentLayer = 1;\n              currentUnit++;\n            }\n            currentTenant = 0;\n\n            var unit = { leases: [{}] };\n\n            for (key in row) {\n              // Unit data\n              switch (key) {\n                case 'Number':\n                  unit.number = row[key];\n                  break;\n                case 'Beds':\n                  unit.beds = row[key];\n                  break;\n                case 'Baths':\n                  unit.baths = row[key];\n                  break;\n                case 'Sq Ft':\n                  unit.sq_ft = row[key];\n                  break;\n                case 'Rent':\n                  unit.rent = app.utils.parseMoney(row[key]);\n                  unit.leases[0].rent = app.utils.parseMoney(row[key]);\n                  break;\n\n                // Lease data\n                case 'Start Date':\n                  unit.leases[0].start_date = row[key];\n                  break;\n                case 'End Date':\n                  unit.leases[0].end_date = row[key];\n                  break;\n                case 'First Month':\n                  unit.leases[0].first_month = '-' + app.utils.parseMoney(row[key]);\n                  break;\n                case 'Last Month':\n                  unit.leases[0].last_month = '-' + app.utils.parseMoney(row[key]);\n                  break;\n                case 'Security':\n                  unit.leases[0].security = app.utils.parseMoney(row[key]);\n                  break;\n                default:\n                  var error = {};\n                  var value = key + '';\n                  var location = self.getLocation(key, sheet);\n                  error[location] = value;\n                  invalidKeys.push(error);\n                  break;\n              }\n            }\n            output.units.push(unit);\n            break;\n          case 'tenant':\n            // if this is the first tenant on the lease\n            if (currentLayer == 1) {\n              currentLayer++;\n              output.units[currentUnit].leases[0].tenants = [];\n            }\n\n            var tenant = {};\n\n            for (key in row) {\n              // Unit data\n              switch (key) {\n                case 'First Name':\n                  tenant.first_name = row[key];\n                  break;\n                case 'Last Name':\n                  tenant.last_name = row[key];\n                  break;\n                case 'Phone':\n                  tenant.phone = app.utils.validateContact(row[key], true)['phone'];\n                  break;\n                case 'Email':\n                  tenant.email = row[key];\n                  break;\n                default:\n                  var error = {};\n                  var value = key + '';\n                  var location = self.getLocation(key, sheet);\n                  error[location] = value;\n                  invalidKeys.push(error);\n                  break;\n              }\n            }\n            output.units[currentUnit].leases[0].tenants.push(tenant);\n            // output.units[currentUnit].leases.length;\n            break;\n          default:\n            // this should never run\n            console.warn(row, index);\n            console.warn('a row of bad data was found');\n            break;\n        }\n      });\n\n      // print errors in view \n      if (invalidKeys.length > 0) {\n        console.warn(invalidKeys);\n        var keyErrors = this.parseKeyErrors(invalidKeys);\n        this.displayKeyErrors(keyErrors);\n        return false;\n      }\n\n      console.log(output)\n\n      // if there are units, make sure to clean up lease data\n      if (output.units) {\n        output.units.forEach(function(x, i) {\n\n          // lol omg\n          output.units[i].leases = output.units[i].leases.filter(function(x, i) {\n            return _.isEmpty(x) ? false : x;\n          });\n          if (output.units[i].leases.length < 1) {\n            delete output.units[i].leases;\n          }\n        });\n      }\n\n      return output;\n    },\n\n    parseKeyErrors: function(error_array) {\n      var stringified = error_array.map(function(x) {\n        return JSON.stringify(x);\n      });\n      var output = _.uniq(stringified);\n      output = output.map(function(x) {\n        return JSON.parse(x);\n      });\n      return output;\n    },\n\n    displayMessage: function(message, data) {\n      var $message = $('<div class=\"success\"></div>');\n      $message.text(message);\n      var $messages = this.$el.find('.messages');\n      $messages.append($message);\n    },\n\n    displayErrorMessage: function(errors, data) {\n      var self = this;\n      var errorMessage = '';\n\n      this.$el.find('.file-drop').removeClass('loading');\n\n      if (typeof errors == 'object') {\n        for (var error in errors) {\n          if (data) {\n            var html = $('<div class=\"error\"><pre></pre></div>');\n            html.children('pre').text(JSON.stringify(data, undefined, 2));\n            self.$el.find('.messages').append(html);\n          }\n          if (error == 'message') {\n            errorMessage = errors[error];\n          } else {\n            errorMessage = error + ': ' + errors[error];\n          }\n        }\n      } else {\n        errorMessage = errors;\n      }\n\n      var $error = $('<div class=\"error strong\">' + errorMessage + '</div>');\n\n      self.$el.find('.messages').append($error);\n    },\n\n    displayKeyErrors: function(keyErrors) {\n      var self = this;\n      //this.$el.find('.messages').html('');\n\n      this.$el.find('.file-drop').removeClass('loading');\n\n      keyErrors.forEach(function(x) {\n        var errorMessage = '';\n        for (var key in x) {\n          errorMessage += 'Invalid key \"' + x[key] + '\"\" at ' + key;\n        }\n        self.$el.find('.messages').append($('<div class=\"error\">' + errorMessage + '</div>'));\n      });\n    },\n\n    /**\n     * Find a value within an object and return the key, for data import only\n     * \n     * @param  {string} value   [value to search for]\n     * @param  {object} object  [object to search]\n     * @return {string}         [key that contains value]\n     */\n    \n    findVal: function(value, object) {\n      for (var key in object) {\n        if (typeof object[key] == 'object') {\n          if (object[key]['h'] == value) return key;\n        }\n      }\n    },\n\n    getLocation: function(value, sheet) {\n      return this.findVal(value, sheet);\n    },\n\n    getModelType: function(object) {\n\n      if (this.propertyFields.some(function(v) { return (v in object) } )) {\n        return 'property';\n      } else if (this.unitFields.some(function(v) { return (v in object) } )) {\n        return 'unit_lease';\n      } else if (this.tenantFields.some(function(v) { return (v in object) } )) {\n        return 'tenant';\n      } else {\n        return false;\n      }\n    },\n\n    validateAll: function(data) {\n      var self = this;\n\n      // check each sheet to see if any didn't pass\n      var parseCheckAll = true;\n      data.forEach(function(x) {\n        if (!x) parseCheckAll = false;\n      });\n      if (!parseCheckAll) return false;\n\n      // all sheets passed, show message and send data\n      this.displayMessage('Data parsed successful, validating...');\n\n      // begin validation\n\n      data = data.map(function(property) {\n\n        // var propertyData = _.omit(property, 'units');\n        self.validateModel(property, 'property');\n\n\n        if (property.units) {\n          property.units = property.units.map(function(unit) {\n\n            // var unitData = _.omit(unit, 'leases');\n            unit = self.validateModel(unit, 'unit');\n\n            if (unit.leases) {\n              unit.leases = unit.leases.map(function(lease) {\n                \n                // var leaseData = lease;\n                lease = self.validateModel(lease, 'lease');\n\n                if (lease.tenants) {\n                  lease.tenants = lease.tenants.map(function(tenant) {\n                    \n                    // var tenantData = tenant;\n                    self.validateModel(tenant, 'tenant');\n                    return tenant;\n                  });\n                }\n                return lease;\n              });\n            }\n            return unit;\n          });\n        }\n        return property;\n      });\n      \n      if (this.errors) return false;\n\n      this.data = data;\n\n      var delay = setTimeout(function() {\n        self.displayMessage('Validation successful, processing...');\n      }, 700);\n\n      this.verifyData();\n    },\n\n    validateModel: function(_data, _modelName) {\n      var model;\n\n      switch (_modelName) {\n        case 'property':\n          model = new PropertyModel();\n          break;\n        case 'unit':\n          model = new UnitModel();\n          _.extend(model.validation, {\n            property: {\n              required: false\n            }\n          });\n          break;\n        case 'lease':\n          model = new LeaseModel();\n          _.extend(model.validation, {\n            unit: {\n              required: false\n            }\n          });\n          break;\n        case 'tenant':\n          model = new TenantModel();\n          break;\n      }\n\n      var data = app.schema.process(_data, model);\n\n      model.set(data);\n      _.extend(model, Backbone.Validation.mixin);\n\n      // model.validate() returns an object of errors, or false\n      var validation_errors = model.validate();\n\n      if (validation_errors) {\n        this.errors = true;\n        this.displayErrorMessage(validation_errors, _data);\n        delete model;\n        return false;\n      } else {\n        // if data validated successfully\n        // overwrite the original data with processed data\n\n        console.log(data);\n\n        this.queue[_modelName].push(model);\n        delete model;\n        return data;\n      }\n    },\n\n    // render the queue of models to verify all data before sending to server\n    verifyData: function() {\n      var self = this;\n\n      if (this.queue.length === 0) {\n        this.displayErrorMessage({\n          queue_empty: 'No data in queue'\n        });\n        return;\n      }\n\n      var queue = this.queue;\n\n      for (var type in queue) {\n        console.log(type, queue[type]);\n\n        var length = queue[type].length;\n        var model = length === 1 ? type : app.utils.modelNames(type, true);\n        var message = length + ' ' + model;\n        var data = [];\n        queue[type].forEach(function(x) {\n          data.push(JSON.stringify(x.toJSON(), undefined, 2));\n        });\n\n        this.displayMessage(message, data.join(', '));\n      }\n\n      var delay = setTimeout(function() {\n        self.$el.find('.file-drop').removeClass('loading');\n        self.$el.find('.import').fadeOut(600, function() {\n          self.$el.addClass('processed');\n          self.showSummary();\n        });\n        clearTimeout(delay);\n      }, 1200);\n    },\n\n    promptSave: function() {\n      var target = 'test';\n      var message = 'Are you sure you want to import ' + target + '?';\n\n      app.controls.modalConfirm(message, 'confirmSave', this);\n    },\n\n    submitData: function() {\n      app.controls.loadLock(true);\n\n      console.log(this.data);\n\n      this.sendData({\n        data: this.data, \n      }).then(function() {\n        console.log(arguments);\n\n        app.controls.loadLock(false);\n        app.router.navigate('properties', { trigger: true });\n        app.alerts.success('Data imported successfully!');\n      }).fail(function(error) {\n        console.warn(arguments);\n        app.alerts.error('Could not import data');\n        app.controls.loadLock(false);\n      });\n    },\n\n    sendData: function(options, callback) {\n      return app.utils.request({\n        path: 'import',\n        method: 'POST',\n        data: options.data,\n        refresh: true\n      }, callback);\n    },\n\n    showSummary: function() {\n      this.$el.find('.summary-table').html(this.template_summary({ \n        properties: this.data \n      }));\n    },\n\n    resetView: function() {\n      delete this.data;\n\n      var self = this;\n      this.$el.find('.messages').html('');\n      this.$el.removeClass('processed');\n\n      this.$el.find('form')[0].reset();\n      this.filesChosen();\n\n      var delay = setTimeout(function() {\n        self.$el.find('.summary-table').html('');\n        self.$el.find('.import').fadeIn(600);\n        clearTimeout(delay);\n      }, 600);\n      \n    }\n\n  });\n});"]}