{"version":3,"sources":["view/modals/ModalTransferView.js"],"names":["define","app","ModalView","FundingSourcesCollection","ManagersCollection","TransferModel","DateView","ModalTransferTemplate","extend","events","blur .amount","title","label","this","type","action","template","_","initialize","_options","self","promises","utils","model","managers","fetch","then","resolve","funding_sources","$","when","apply","renderModalView","validateAmount","e","amount","currentTarget","val","invalid","validateMoney","controls","fieldError","element","error","render","toJSON","primary_id","session","user","get","primary_fs","find","funding_source","id","console","log","options","company","destination","source","context","tenants","ready","$el","html","name","confirm","formData","constructData","bill","validate","addClass","save","balance","set","updated","moment","utc","toISOString","display_balance","unset","silent","wait","removeClass","trigger","eventName","closeModal","fail","warn","arguments"],"mappings":"AAIAA,QACE,MACA,wBACA,8CACA,sCACA,gCACA,+BACA,6CAEF,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAOL,GAAUM,QAEfC,QACEC,eAAgB,kBAGlBC,MAAO,WACL,GAAIC,GAAsB,mBAAdC,KAAKC,KAA4BA,KAAO,EACpD,OAAOD,MAAKE,OAAS,IAAMH,EAAQ,aAGrCI,SAAUC,EAAED,SAAST,GAErBW,WAAY,SAASC,GACfA,GAAUF,EAAET,OAAOK,KAAMM,EAE7B,IAAIC,GAAOP,KAEPQ,EAAWpB,EAAIqB,MAAMD,SAAS,EAE7BR,MAAKU,QAAOV,KAAKU,MAAQ,GAAIlB,GAAc,MAC9CU,OAAQ,SAGVF,KAAKW,SAAW,GAAIpB,GACpBS,KAAKW,SAASC,QAAQC,KAAK,WACzBL,EAAS,GAAGM,YAGdd,KAAKe,gBAAkB,GAAIzB,GAC3BU,KAAKe,gBAAgBH,QAAQC,KAAK,WAChCL,EAAS,GAAGM,YAGdE,EAAEC,KAAKC,MAAMF,EAAGR,GAAUK,KAAK,WAC7BN,EAAKY,qBAITC,eAAgB,SAASC,GACvB,GAAIC,GAASN,EAAEK,EAAEE,eAAeC,MAC5BC,EAAUrC,EAAIqB,MAAMiB,cAAcJ,EAElCG,IACFrC,EAAIuC,SAASC,YACXC,QAASb,EAAEK,EAAEE,eACbtB,KAAM,QACN6B,MAAOL,KAKbM,OAAQ,WAEN,GAAIhB,GAAkBf,KAAKe,gBAAgBiB,SAEvCC,EAAa7C,EAAI8C,QAAQC,KAAKC,IAAI,yCAClCC,EAAatB,EAAgBuB,KAAK,SAASC,GAC7C,MAAOA,GAAeC,KAAOP,GAG/BQ,SAAQC,IAAIL,EAEZ,IAAIM,IACF1C,KAAMD,KAAKC,KACXqB,OAAQtB,KAAKsB,OACbsB,QAASxD,EAAI8C,QAAQC,KAAKC,IAAI,WAC9BC,WAAYA,EAoBd,OAhBkB,eAAdrC,KAAKC,KACP0C,EAAQE,YAAc7C,KAAKW,SAASqB,SACb,mBAAdhC,KAAKC,OACd0C,EAAQG,OAAS9C,KAAK+C,QAAQC,SAGhChD,KAAKiD,MAAMN,GAEO,mBAAd3C,KAAKC,MAEPD,KAAKkD,IAAIZ,KAAK,gBAAgBa,KAAK,GAAI1D,IACrC2D,KAAM,OACNL,QAAS/C,OACRkD,KAGElD,MAGTqD,QAAS,WACP,GAAI9C,GAAOP,KACPsD,EAAWtD,KAAKuD,eAGpB,OAFkB,mBAAdvD,KAAKC,OAA2BqD,EAASE,KAAOxD,KAAK+C,QAAQrC,MAAM0B,IAAI,UAEtEhD,EAAIqB,MAAMgD,SAASzD,KAAMsD,KAE9BtD,KAAKkD,IAAIZ,KAAK,UAAUoB,SAAS,eAEjC1D,MAAKU,MAAMiD,KAAKL,GAAUzC,KAAK,WAE7B,GAAIS,GAASgC,EAAShC,OAClBsC,EAAUrD,EAAKG,MAAM0B,IAAI,kBAC7B7B,GAAKG,MAAMmD,KACTC,QAAWC,OAAOC,MAAMC,cACxBC,gBAAmBN,EAAUtC,IAE/Bf,EAAKG,MAAMyD,MAAM,UAAYC,QAAQ,IACrC7D,EAAK2C,IAAIZ,KAAK,UAAUoB,SAAS,WAEjCtE,EAAIuC,SAAS0C,KAAK,MAAMxD,KAAK,WAC3BN,EAAK2C,IAAIZ,KAAK,UAAUgC,YAAY,mBACpC/D,EAAKwC,QAAQwB,QAAQhE,EAAKiE,WAC1BjE,EAAKkE,iBAGNC,KAAK,WACNjC,QAAQkC,KAAKC","file":"ModalTransferView.js","sourcesContent":["/**\n * ModalTransferView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'collection/account/FundingSourcesCollection',\n  'collection/users/ManagersCollection',\n  'model/transfers/TransferModel',\n  'view/repeaters/date-calendar',\n  'text!templates/modals/modal-transfer.html'\n],\nfunction(\n  app,\n  ModalView, \n  FundingSourcesCollection,\n  ManagersCollection, \n  TransferModel, \n  DateView, \n  ModalTransferTemplate\n) {\n\n  return ModalView.extend({\n\n    'events': { \n      'blur .amount': 'validateAmount'\n    },\n\n    title: function() {\n      var label = this.type === 'non-electronic' ? type : '';\n      return this.action + ' ' + label + ' Transfer';\n    },\n    \n    template: _.template(ModalTransferTemplate),\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n\n      var promises = app.utils.promises(2);\n\n      if (!this.model) this.model = new TransferModel(null, {\n        action: 'add'\n      });\n\n      this.managers = new ManagersCollection();\n      this.managers.fetch().then(function() {\n        promises[0].resolve();\n      });\n\n      this.funding_sources = new FundingSourcesCollection();\n      this.funding_sources.fetch().then(function() {\n        promises[1].resolve();\n      });\n\n      $.when.apply($, promises).then(function() {\n        self.renderModalView();\n      });\n    },\n\n    validateAmount: function(e) {\n      var amount = $(e.currentTarget).val();\n      var invalid = app.utils.validateMoney(amount);\n      \n      if (invalid) {\n        app.controls.fieldError({\n          element: $(e.currentTarget),\n          type: 'error',\n          error: invalid\n        });\n      }\n    },\n\n    render: function() {\n\n      var funding_sources = this.funding_sources.toJSON();\n\n      var primary_id = app.session.user.get('dwolla_account.primary_funding_source');\n      var primary_fs = funding_sources.find(function(funding_source) {\n        return funding_source.id === primary_id;\n      });\n\n      console.log(primary_fs);\n\n      var options = {\n        type: this.type,\n        amount: this.amount,\n        company: app.session.user.get('company'),\n        primary_fs: primary_fs\n      };\n\n      // NOTE: why is this destination on here\n      if (this.type === 'electronic') {\n        options.destination = this.managers.toJSON();\n      } else if (this.type === 'non-electronic') {\n        options.source = this.context.tenants;\n      }\n\n      this.ready(options);\n\n      if (this.type === 'non-electronic') {\n        // init datepicker\n        this.$el.find('.date-picker').html(new DateView({\n          name: 'date',\n          context: this\n        }).$el);\n      }\n\n      return this;\n    },\n\n    confirm: function() {\n      var self = this;\n      var formData = this.constructData();\n      if (this.type === 'non-electronic') formData.bill = this.context.model.get('_id');\n\n      if (!app.utils.validate(this, formData)) return false;\n\n      this.$el.find('.modal').addClass('loading');\n\n      this.model.save(formData).then(function() {\n        // we dont actually want this data on the model...\n        var amount = formData.amount;\n        var balance = self.model.get('display_balance');\n        self.model.set({\n          'updated': moment.utc().toISOString(),\n          'display_balance': balance - amount\n        });\n        self.model.unset('amount', { silent: true });\n        self.$el.find('.modal').addClass('success');\n\n        app.controls.wait(1900).then(function() {\n          self.$el.find('.modal').removeClass('loading success');\n          self.context.trigger(self.eventName);\n          self.closeModal();\n        });\n        \n      }).fail(function() {\n        console.warn(arguments);\n      });\n    }\n\n  });\n});"]}