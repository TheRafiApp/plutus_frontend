{"version":3,"sources":["view/modals/ModalInviteView.js"],"names":["define","app","ModalView","ModalInviteTemplate","extend","title","this","action","role","template","_","messages","success","error","initialize","_options","self","utils","capitalize","context","modelName","loadModel","get","then","UserModel","model","controls","smartRender","renderModalView","render","companies","collections","toJSON","ready","handleError","e","message","key","responseJSON","data","index_name","console","log","removed","confirm","set","unremove","trigger","eventName","closeModal","fail","alerts","warn"],"mappings":"AAIAA,QACE,MACA,wBACA,2CAEF,SAASC,EAAKC,EAAWC,GAEvB,MAAOD,GAAUE,QAEfC,MAAO,WACL,MAAOC,MAAKC,OAAS,IAAMD,KAAKE,MAGlCC,SAAUC,EAAED,SAASN,GAErBQ,UACEC,QAAS,oCACTC,MAAO,iCAGTC,WAAY,SAASC,GACfA,GAAUL,EAAEN,OAAOE,KAAMS,EAE7B,IAAIC,GAAOV,IAGXA,MAAKE,KAAOP,EAAIgB,MAAMC,WAAWZ,KAAKa,QAAQC,UAG9C,IAAIb,GAAuB,eAAdD,KAAKE,KAAwB,GAAK,QAG/CP,GAAIgB,MAAMI,UAAUC,IAAI,SAAWhB,KAAKE,KAAO,SAASe,KAAK,SAASC,GACpER,EAAKS,MAAQ,GAAID,GAAU,MAAQjB,OAAQA,IAE3CN,EAAIyB,SAASC,YAAYX,GAAMO,KAAK,WAClCP,EAAKY,uBAKXC,OAAQ,WACN,GAEIC,GAAY7B,EAAI8B,YAAYD,WAAa7B,EAAI8B,YAAYD,UAAUE,QAMvE,OAJA1B,MAAK2B,OACHH,UAAWA,IAGNxB,MAKT4B,YAAa,SAASC,GACpB,GAGIC,GAEAC,EALArB,EAAOV,KAEPO,EAAQsB,EAAEG,YAKd,IAAoB,gCAAhBzB,EAAMA,OAcR,GAbAuB,EAAU,qCAEoB,UAA1BvB,EAAM0B,KAAKC,YACbH,EAAM,QACND,GAAW,iBACwB,UAA1BvB,EAAM0B,KAAKC,aACpBH,EAAM,QACND,GAAW,kBAGbK,QAAQC,IAAIL,GAGRxB,EAAM0B,KAAKI,QAcb,YAbIC,QAAQ,yEAEVH,QAAQC,IAAIL,EAAKxB,EAAM0B,KAAKI,QAAa,KACzC3B,EAAKS,MAAMoB,IAAIhC,EAAM0B,KAAKI,SAE1B3B,EAAKS,MAAMqB,WAAWvB,KAAK,WACzBP,EAAKG,QAAQ4B,QAAQ/B,EAAKgC,WAC1BhC,EAAKiC,eACJC,KAAK,SAASf,GACflC,EAAIkD,OAAOtC,MAAM,gDACjB4B,QAAQW,KAAKjB,WAOnBC,GAAU,4CAGZK,SAAQW,KAAKhB,GAEbnC,EAAIkD,OAAOtC,MAAMuB","file":"ModalInviteView.js","sourcesContent":["/**\n * ModalInviteView.js\n */\n\ndefine([\n  'app',\n  'view/modals/ModalView',\n  'text!templates/modals/modal-invite.html'\n],\nfunction(app, ModalView, ModalInviteTemplate) {\n\n  return ModalView.extend({\n\n    title: function() {\n      return this.action + ' ' + this.role;\n    },\n\n    template: _.template(ModalInviteTemplate),\n\n    messages: {\n      success: 'The user was successfully invited',\n      error: 'The user could not be invited'\n    },\n\n    initialize: function(_options) {\n      if (_options) _.extend(this, _options);\n\n      var self = this;\n\n      // dynamically choose model\n      this.role = app.utils.capitalize(this.context.modelName);\n\n      // all roles get invited except superadmins\n      var action = this.role === 'superadmin' ? '' : 'invite';\n\n      // load the model\n      app.utils.loadModel.get('users/' + this.role + 'Model').then(function(UserModel) {\n        self.model = new UserModel(null, { action: action });\n\n        app.controls.smartRender(self).then(function() {\n          self.renderModalView();\n        });\n      });\n    },\n\n    render: function() {\n      var self = this;\n\n      var companies = app.collections.companies && app.collections.companies.toJSON();\n\n      this.ready({\n        companies: companies\n      });\n\n      return this;\n    },\n\n\n    // TODO: move this \n    handleError: function(e) {\n      var self = this;\n\n      var error = e.responseJSON;\n      var message;\n\n      var key;\n      // user already exists\n      if (error.error === 'pymongo_duplicate_key_error') {\n        message = 'There is already a user with that ';\n\n        if (error.data.index_name === 'phone') {\n          key = 'phone';\n          message += 'phone number.';\n        } else if (error.data.index_name === 'email') {\n          key = 'email';\n          message += 'email address.';\n        }\n\n        console.log(key);\n\n        // user was previously removed\n        if (error.data.removed) {\n          if (confirm('This user was previously removed, would you like to un-remove them?')) {\n\n            console.log(key, error.data.removed['_id']);\n            self.model.set(error.data.removed);\n\n            self.model.unremove().then(function() {\n              self.context.trigger(self.eventName);\n              self.closeModal();\n            }).fail(function(e) {\n              app.alerts.error('Sorry, we were unable to unremove that user.');\n              console.warn(e);\n            });\n          }\n          return;\n        }\n\n      } else {\n        message = 'Sorry, unable to create user at this time.';\n      }\n\n      console.warn(message);\n\n      app.alerts.error(message)\n    }\n\n  });\n});"]}